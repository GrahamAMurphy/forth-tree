\ (c) 2001 Johns Hopkins University / Applied Physics Laboratory
\ Prepare to boot from EEPROM.
\ This is intended to be a component for a boot ROM ...
hex

structure prog-head-struct	\ header of program
   cell: .prog-mem		\ memory block in which to load program
   cell: .prog-dst		\ destination address in block
   cell: .prog-exec		\ program entry point
   cell: .prog-length		\ program length in words (including header)
   cell: .prog-cksum		\ 16 bit 2's complement checksum
\ program begins here ...
endstructure

: checksum+	\ ( checksum addr mem length -- checksum' ) Accumulate
		\ word-wise checksum at given address in given memory.  The
		\ length is in words.
   swap set-mem far			\ all accesses in remote memory
   0 do swap over @ + swap cell+ loop	\ accumulate checksum
   drop ;

: eeprom-good?	\ ( boot-addr boot-mem -- t/f ) Return true if EEPROM checksum
		\ is good.  The checksum is the 16 bit 2's complement checksum
		\ of the the header and program.  The header includes a value,
		\ (the checksum) to make this computation produce zero.
   0 -rot dup set-mem over .prog-length far@ checksum+ 0= ;

: dst-ok?	\ ( boot-addr boot-mem -- t/f ) Return true if it is ok to
		\ write to memory indicated by given boot header.
   set-mem .prog-mem far@ get-code <> ;

: eeprom-copy	\ ( boot-addr boot-mem -- ) Copy specified EEPROM program to
		\ its destination.
   set-mem dup >r			\ source
      prog-head-struct + get-mem
   r@ .prog-dst far@ r@ .prog-mem far@	\ destination
   r> .prog-length far@			\ number of words to copy
      prog-head-struct cell/ -
   far for				\ s: src-addr src-mem dst-addr dst-mem
      >r >r set-mem @+ swap get-mem swap \ read source word
      r> r@ set-mem !+ r>		\ write destination word
   next 2drop 2drop ;

: copy-ok?	\ ( boot-addr boot-mem -- t/f ) Confirm that EEPROM copy was ok
		\ by computing checksum of EEPROM header + RAM program.
   0 -rot over >r dup >r		\ compute boot header checksum
      prog-head-struct cell/ checksum+
   r> set-mem r@ .prog-dst far@		\ compute program checksum
   r@ .prog-mem far@
   r> .prog-length far@ prog-head-struct cell/ -
      checksum+ 0= ;			\ accumulate RAM checksum

: eeprom-entry	\ ( boot-addr boot-mem -- entry-addr entry-mem ) Return
		\ program entry point from boot header.
   set-mem dup .prog-exec far@ swap .prog-mem far@ ;

: bootload	\ ( boot-addr boot-mem -- entry-addr entry-mem true <or> false )
		\ Attempt to load program described by given boot data.  If
		\ successful, return the entry point of the program and true.
		\ Otherwise, return false.
   2dup eeprom-good? if			\ if eeprom is ok
      2dup dst-ok? if			\ if destination is ok
	 2dup eeprom-copy		\ coppy eeprom
	 2dup copy-ok? if		\ if copy successful
	    eeprom-entry true exit	\ return entry point; exit with success
	 then
      then
   then
   2drop false ;			\ return failure flag
