\ (c) 2002 Johns Hopkins University / Applied Physics Laboratory
\ I2C bus low-level interface
hex

\ * Low-level interface to I2C bus.  The bus is time-multiplexed according
\ * to parameters provided by the user.  #i2c-slots defines how many time
\ * slots to provide.  #i2c-clocks defines how many system clocks each slot
\ * takes.  This code calls a user-provided function each time slot.  The
\ * function can use the low-level I2C bus access functions provided here.

module> i2c

\ ------------------------------------------------------------------------
\ Slots

create i2c-vectors			\ slots: each has an execution vector
   #i2c-slots cells allot
variable i2c-free			\ pointer to next free slot
   i2c-vectors i2c-free !

variable i2c-slot			\ current slot number

i2c-int# int:	\ ( -- ) I2C bus (timer) interrupt.
   i2c-slot @ 1+ dup #i2c-slots =	\ step to next slot
      if drop 0 then dup i2c-slot !	\  modulo #i2c-slots
   cells i2c-vectors + @ execute ;int	\ execute handler for this slot

public:
: i2c-active	\ ( f -- ) Schedule call of f in next free slot.
   i2c-free @ dup cell+ i2c-free !	\ get next free slot
   ! ;					\ record f in slot
private:

\ ------------------------------------------------------------------------
\ Direct bus access

public:

: i2c!s		\ ( value16 device -- ) Start write transaction.
		\ Note: assumes that 'device' has empty lsb for R/W flag.
   swap i2c-data!  i2c-cntl! ;		\ save value16; save device|W, trigger

: i2c@s		\ ( device -- ) Start read transaction
		\ Note: assumes that 'device' has empty lsb for R/W flag.
   1+ i2c-cntl! ;			\ save device|R, triggers transaction

: i2c@r		\ ( -- value16 ) Return result of read.
   i2c-data@ || ; inline

private:

\ ------------------------------------------------------------------------
\ Initialize

public:

: init-i2c	\ ( -- ) Initialize low-level I2C interface.
   i2c-vectors #i2c-slots 0 do		\ for each slot
      ['] nop over !  cell+		\ place default nop
   loop drop
   #i2c-clocks 1- i2c-timer!		\ start timer
   i2c-int# get-mask unmask-int ;	\ unmask I2C bus interrupt

private:

endmodule>
