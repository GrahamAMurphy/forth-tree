\ (c) 2004 Johns Hopkins University / Applied Physics Laboratory
\ Optimization rules
hex

\ Note: uncomment following for testing; more at end of file
\ : >.
\ t-i, ;

\ Notes:
\ - Rules are applied from bottom/end of file to top.  This may be exploited,
\ e.g. to override general rules with special-case rules.  The special-case
\ rule would follow the general rule and would be applied first.
\ - Some rules with <lil are used on <lil and <lih instructions.  The ?high
\ wildcard is used to match the l/h scale factor.
\ - Missing/failed optimizations:
\	-1 +
\	8000 0= ;		thinks 8000 is a long call

\ ------------------------------------------------------------------------
\ Rules for ALU instructions

rule dropdup
	<alu	nopb popp >,
	<alu	nopa pushp
-->	<alu	nopb >.
endrule

rule nipdup
	<alu	nopa popp >,
	<alu	nopa pushp
-->	<alu	nopa swapp >.
endrule

\ Could occur, for example, in "swap lshift"
rule swapswap
	<alu	nopb swapp >,
	<alu	nopb swapp
-->	\ nothing
endrule

rule swap<binop>		\ includes swapdrop
	<alu	nopb swapp >,
	<alu	?aluop popp
0 swapaluop? isconstraint
-->	<alu	0 ?? popp >.
endrule

rule over<binop>
	<alu	nopb pushp >,
	<alu	?aluop popp
0 swapaluop? isconstraint
-->	<alu	0 ?? >.
endrule

rule over[over<binop>]
	<alu	nopb pushp >,
	<alu	?aluop
0 swapaluop? isconstraint
-->	<alu	0 ?? pushp >.
endrule

rule swap[over<binop>]
	<alu	nopb swapp >,
	<alu	?aluop
0 swapaluop? isconstraint
-->	<alu	0 ?? swapp >.
endrule

rule <nopa>not
	<alu	nopa ?stackop >,
	<alu	nota
-->	<alu	nota 0 ?? >.
endrule

rule <nopb>not
	<alu	nopb ?stackop >,
	<alu	nota
-->	<alu	notb 0 ?? >.
endrule

\ ------------------------------------------------------------------------
\ Rules for test instructions

rule swap<bincmp>
	<alu	nopb swapp >,
	<test	?aluop ?condop popp
0 swapaluop? isconstraint
-->	<test	0 ?? 1 ?? popp >.
endrule

rule over<bincmp>
	<alu	nopb pushp >,
	<test	?aluop ?condop popp
0 swapaluop? isconstraint
-->	<test	0 ?? 1 ?? >.
endrule

rule over[over<bincmp>]
	<alu	nopb pushp >,
	<test	?aluop ?condop
0 swapaluop? isconstraint
-->	<test	0 ?? 1 ?? pushp >.
endrule

rule swap[over<bincmp>]
	<alu	nopb swapp >,
	<test	?aluop ?condop
0 swapaluop? isconstraint
-->	<test	0 ?? 1 ?? swapp >.
endrule

rule <alu><uncmp>
	<alu	?aluop ?stackop >,
	<test	nopa ?condop
-->	<test	0 ?? 2 ?? 1 ?? >.
endrule

rule <cmp>not
	<test	?aluop ?condop ?stackop >,
	<alu	nota
1 notcond? isconstraint
-->	<test	0 ?? 1 ?? 2 ?? >.
endrule

\ ------------------------------------------------------------------------
\ Rules for conditional branch instructions

rule <alu><?br>1
	<alu	?aluop pushp >,
	<testx	nopa Zbar popp
-->	<testx	0 ?? Zbar >.
endrule

rule <alu><?br>2
	<alu	?aluop >,
	<testx	nopa Zbar popp
-->	<testx	0 ?? Zbar popp >.
endrule

rule <cmp><?br>1
	<test	?aluop ?condop pushp >,
	<testx	nopa Zbar popp
-->	<testx	0 ?? 1 ?? >.
endrule

rule <cmp><?br>2
	<test	?aluop ?condop >,
	<testx	nopa Zbar popp
-->	<testx	0 ?? 1 ?? popp >.
endrule

rule swap[2dup<bincmp><?br>]
	<alu	nopb swapp >,
	<testx	?aluop ?condop
0 swapaluop? isconstraint
-->	<testx	0 ?? 1 ?? swapp >.
endrule

rule <alu>[dup<uncmp><?br>]
	<alu	?aluop ?stackop >,
	<testx	nopa ?condop
-->	<alux	0 ?? 2 ?? 1 ?? >.
endrule

rule [nipdup<uncmp>]<?br>
	<test	nopa ?condop swapp >,
	<testx	nopa Zbar popp
-->	<alux	nopa 0 ?? popp >.
endrule

\ ------------------------------------------------------------------------
\ Rules for register access instructions

rule <alu><reg!>1
	<alu	?aluop pushp >,
	<reg!	nopa ?reg popp
-->	<reg!	1 ?? 0 ?? >.
endrule

rule <alu><reg!>2
	<alu	?aluop >,
	<reg!	nopa ?reg popp
-->	<reg!	1 ?? 0 ?? popp >.
endrule

rule <reg!>swap
	<reg!	?aluop ?reg >,
	<alu	nopb swapp
-->	<reg!	0 ?? 1 ?? swapp >.
endrule

rule <reg!>dup
	<reg!	?aluop ?reg >,
	<alu	nopa pushp
-->	<reg!	0 ?? 1 ?? pushp >.
endrule

\ Note: handles "r> drop".  We can't delete sequence entirely because
\ we need to preserve return stack side effects.
rule <reg@><binop>			\ includes r> drop
	<reg@	?reg nopb pushp >,
	<alu	?aluop popp
1 swapaluop? isconstraint
-->	<reg@	0 ?? 1 ?? >.
endrule

\ Handles dup[<reg@><binop>], nip[<reg@><binop>], and [nipdup][<reg@><binop>]
rule <nopa>[<reg@><binop>]
	<alu	nopa ?stackop >,
	<reg@	?reg ?aluop
-->	<reg@	1 ?? 2 ?? 0 ?? >.
endrule

\ Equivalent to above, but [nip<reg@>] done first.
rule [nip<reg@>]<binop>
	<reg@	?lit nopb swapp >,
	<alu	?aluop popp
1 swapaluop? isconstraint
-->	<reg@	0 ?? 1 ?? popp >.
endrule

rule <reg@>[over<binop>]
	<reg@	?reg nopb pushp >,
	<alu	?aluop
1 swapaluop? isconstraint
-->	<reg@	0 ?? 1 ?? pushp >.
endrule

rule [nip<reg@>][over<binop>]
	<reg@	?lit nopb swapp >,
	<alu	?aluop
1 swapaluop? isconstraint
-->	<reg@	0 ?? 1 ?? swapp >.
endrule

\ Special case, e.g converts "r@ = ?br" to "r@- 0=?br".
rule <reg@><bincmp><?br>
	<reg@	?reg nopb pushp >,
	<test	?aluop ?condop popp >,
	<testx	nopa Zbar popp
1 swapaluop?
2 zerocond? and isconstraint
-->	<reg@	0 ?? 1 ?? >.
	<testx	nopa 2 ?? popp >.
endrule

\ Note: converts to <reg@>[over<bincmp>]
rule dup<reg@><bincmp>
	<alu	nopa pushp >,
	<reg@	?reg nopb pushp >,
	<test	?aluop ?condop popp
-->	<reg@	0 ?? nopb pushp >.
	<test	1 ?? 2 ?? >.
endrule

rule drop<reg@>
	<alu	nopb popp >,
	<reg@	?reg nopb pushp
-->	<reg@	0 ?? nopb >.
endrule

rule nip<reg@>
	<alu	nopa popp >,
	<reg@	?reg nopb pushp
-->	<reg@	0 ?? nopb swapp >.
endrule

rule drop[drop<reg@>]
	<alu	nopb popp >,
	<reg@	?reg nopb
-->	<reg@	0 ?? nopb popp >.
endrule

\ Special case for "unloop drop"
rule <reg@><reg!>drop
	<reg@	?reg nopb pushp >,
	<reg!	nopa ?reg popp >,
	<alu	nopb popp
-->	<reg@	0 ?? nopb >.
	<reg!	nopa 1 ?? popp >.
endrule

\ Special case for "unloop drop drop"
rule [drop<reg@>]<reg!>drop
	<reg@	?reg nopb >,
	<reg!	nopa ?reg popp >,
	<alu	nopb popp
-->	<reg@	0 ?? popp >.
	<reg!	nopa 1 ?? popp >.
endrule

\ Note: "i +" can be optimized, but probably too rare to be useful.

\ ------------------------------------------------------------------------
\ Rules for short literal instructions

\ Note: turns "short drop" into a nop; see next rule
rule <short><binop>
	<lis	?lit nopb pushp >,
	<alu	?aluop popp
1 swapaluop? isconstraint
-->	<lis	0 ?? 1 ?? >.
endrule

\ Special-case override of previous rule.  This case occurs occasionally,
\ e.g. with endsel.
rule <short>drop
	<lis	?lit nopb pushp >,
	<alu	nopb popp
-->	\ nothing
endrule

\ Handles dup[<short><binop>], nip[<short><binop>], and [nipdup][<short><binop>]
rule <nopa>[<short><binop>]
	<alu	nopa ?stackop >,
	<lis	?lit ?aluop
-->	<lis	1 ?? 2 ?? 0 ?? >.
endrule

\ Equivalent to above, but [nip<short>] done first.
rule [nip<short>]<binop>
	<lis	?lit nopb swapp >,
	<alu	?aluop popp
1 swapaluop? isconstraint
-->	<lis	0 ?? 1 ?? popp >.
endrule

rule <short>[over<binop>]
	<lis	?lit nopb pushp >,
	<alu	?aluop
1 swapaluop? isconstraint
-->	<lis	0 ?? 1 ?? pushp >.
endrule

rule [nip<short>][over<binop>]
	<lis	?lit nopb swapp >,
	<alu	?aluop
1 swapaluop? isconstraint
-->	<lis	0 ?? 1 ?? swapp >.
endrule

\ Special case, e.g converts "5 = ?br" to "5- 0=?br".
rule <short><bincmp><?br>
	<lis	?lit nopb pushp >,
	<test	?aluop ?condop popp >,
	<testx	nopa Zbar popp
1 swapaluop?
2 zerocond? and isconstraint
-->	<lis	0 ?? 1 ?? >.
	<testx	nopa 2 ?? popp >.
endrule

\ Special case, e.g. converts "0 =" to "0="
rule 0<bincmp>
	<lis	0 +# nopb pushp >,
	<test	bminusa ?condop popp
0 zerocond? isconstraint
-->	<test	nopa 0 ?? >.
endrule

\ Note: converts to <short>[over<bincmp>]
rule dup<short><bincmp>
	<alu	nopa pushp >,
	<lis	?lit nopb pushp >,
	<test	?aluop ?condop popp
-->	<lis	0 ?? nopb pushp >.
	<test	1 ?? 2 ?? >.
endrule

rule drop<short/i>
	<alu	nopb popp >,
	<lis	?lit ?aluop pushp
1 alubop? isconstraint
-->	<lis	0 ?? 1 ?? >.
endrule

rule nip<short/i>
	<alu	nopa popp >,
	<lis	?lit ?aluop pushp
1 alubop? isconstraint
-->	<lis	0 ?? 1 ?? swapp >.
endrule

rule drop[drop<short/i>]
	<alu	nopb popp >,
	<lis	?lit ?aluop
1 alubop? isconstraint
-->	<lis	0 ?? 1 ?? popp >. 
endrule

\ ------------------------------------------------------------------------
\ Rules for long literal instructions

\ Note: turns "long drop" into a nop.
rule <long><binop>
	<lil	nopb ?high pushp >,
	0 ?all >,
	<alu	?aluop popp
2 swapaluop? isconstraint
-->	<lil	2 ?? 0 ?? >.
	0 1 ?? >.
endrule

\ Handles dup[<long><binop>], nip[<long><binop>], and [nipdup][<long><binop>]
rule <nopa>[<long><binop>]
	<alu	nopa ?stackop >,
	<lil	?aluop ?high >,
	0 ?all
-->	<lil	1 ?? 2 ?? 0 ?? >.
	0 3 ?? >.
endrule

\ Equivalent to above, but [nip<long>] done first.
rule [nip<long>]<binop>
	<lil	nopb ?high swapp >,
	0 ?all >,
	<alu	?aluop popp
2 swapaluop? isconstraint
-->	<lil	2 ?? 0 ?? popp >.
	0 1 ?? >.
endrule

rule <long>[over<binop>]
	<lil	nopb ?high pushp >,
	0 ?all >,
	<alu	?aluop
2 swapaluop? isconstraint
-->	<lil	2 ?? 0 ?? pushp >.
	0 1 ?? >.
endrule

rule [nip<long>][over<binop>]
	<lil	nopb ?high swapp >,
	0 ?all >,
	<alu	?aluop
2 swapaluop? isconstraint
-->	<lil	2 ?? 0 ?? swapp >.
	0 1 ?? >.
endrule

\ Special case, e.g converts "500 = ?br" to "500- 0=?br".
rule <long><bincmp><?br>
	<lil	nopb ?high pushp >,
	0 ?all >,
	<test	?aluop ?condop popp >,
	<testx	nopa Zbar popp
2 swapaluop?
3 zerocond? and isconstraint
-->	<lil	2 ?? 0 ?? >.
	0 1 ?? >.
	<testx	nopa 3 ?? popp >.
endrule

\ Note: converts to <long>[over<bincmp>]
rule dup<long><bincmp>
	<alu	nopa pushp >,
	<lil	nopb ?high pushp >,
	0 ?all >,
	<test	?aluop ?condop popp
-->	<lil	nopb 0 ?? pushp >.
	0 1 ?? >.
	<test	2 ?? 3 ?? >.
endrule

rule drop<long>
	<alu	nopb popp >,
	<lil	nopb ?high pushp >,
	0 ?all
-->	<lil	nopb 0 ?? >.
	0 1 ?? >.
endrule

rule nip<long>
	<alu	nopa popp >,
	<lil	nopb ?high pushp >,
	0 ?all
-->	<lil	nopb 0 ?? swapp >.
	0 1 ?? >.
endrule

rule drop[drop<long>]
	<alu	nopb popp >,
	<lil	nopb ?high >,
	0 ?all
-->	<lil	nopb 0 ?? popp >. 
	0 1 ?? >.
endrule

\ ------------------------------------------------------------------------
\ Rules for load/store instructions

rule <nopa><load>
	<alu	nopa ?stackop >,
	<@	?mem
-->	<@	1 ?? 0 ?? >.
endrule

rule [<nopa><short>+]<load>
	<lis	?lit bplusa ?stackop >,
	<@	?mem
-->	<@	0 ?? 2 ?? 1 ?? >.
endrule

\ Note: <short><long><load><binop> and <reg@><long><load><binop> are
\ possible, but probably too rare to be useful.

rule dup<long><load><binop>
	<alu	nopa pushp >,
	<lil	nopb ?high pushp >,
	0	?all >,
	<@	?mem >,
	<alu	?aluop popp
-->	<lil	nopb 0 ?? pushp >.
	0	1 ?? >.
	<@	2 ?? >.
	<alu	3 ?? >.
endrule

rule dup<long><load><bincmp>
	<alu	nopa pushp >,
	<lil	nopb ?high pushp >,
	0	?all >,
	<@	?mem >,
	<test	?aluop ?condop popp
-->	<lil	nopb 0 ?? pushp >.
	0	1 ?? >.
	<@	2 ?? >.
	<test	3 ?? 4 ?? >.
endrule

rule [<short>+]<store>
	<lis	?lit bplusa >,
	<!	?mem popp
-->	<!	0 ?? 1 ?? popp >.
endrule

rule dup<long><store>drop
	<alu	nopa pushp >,
	<lil	nopb ?high pushp >,
	0	?all >,
	<!	?lit ?mem popp >,
	<alu	nopb popp
-->	<lil	nopb 0 ?? pushp >.
	0	1 ?? >.
	<!	2 ?? 3 ?? popp >.
endrule

rule dup<reg@><store>drop
	<alu	nopa pushp >,
	<reg@	?reg nopb pushp >,
	<!	?lit ?mem popp >,
	<alu	nopb popp
-->	<reg@	0 ?? nopb pushp >.
	<!	1 ?? 2 ?? popp >.
endrule

rule overover<store>drop
	<alu	nopb pushp >,
	<alu	nopb pushp >,
	<!	?lit ?mem popp >,
	<alu	nopb popp
-->	<!	0 ?? 1 ?? swapp >.
	<alu	nopb swapp >.
endrule

\ ------------------------------------------------------------------------
\ Rules for return instructions

rule <*>return
	0 ?all >,
	<alu	nopa return
0 return?
0 long? not and isconstraint
-->	0 0 ??	return >.
endrule

rule <long>return
	<lil	?aluop ?high ?stackop >,
	0 ?all >,
	<alu	nopa return
-->	<lil	0 ?? 1 ?? 2 ?? return >.
	0 3 ?? >.
endrule

rule <call>return
	<call	?dest >,
	<alu	nopa return
0 nearby? isconstraint
-->	<br	0 ?? >.
endrule

\ ------------------------------------------------------------------------
\ Rules for literal folding

\ Reduces long-op produced below to short-op.  Note: this rule has lower
\ priority than subsequent rules to avoid spurious changes back and forth
\ between short and long.  Also, converts some <long> to <short>.
rule [<nopa><long-op>]>to<short-op>
	<lil	?aluop ?stackop >,
	0 ?all
2 short? isconstraint
-->	<lis	2 ?? 0 ?? 1 ?? >.
endrule

\ Note: produces <long-op>; earlier rule will reduce back to <short-op>.
rule [<nopa><short-op>]<short-op>
	<lis	?lit ?aluop ?stackop >,
	<lis	?lit ?aluop
1 4 foldable? dup if drop 0 3 1 lit-op-folds? then isconstraint
-->	<lil	1 ?? 2 ?? >.
	0 0 ?? >.
endrule

rule 0+					\ structures can produce 0+ nops
	<lis	0 +# bplusa
-->
endrule

rule [<nopa><long-op>]><short-op>
	<lil	?aluop ?stackop >,
	0 ?all >,
	<lis	?lit ?aluop
0 4 foldable? dup if drop 2 3 0 lit-op-folds? then isconstraint
-->	<lil	0 ?? 1 ?? >.
	0 2 ?? >.
endrule

rule [<nopa><short-op>]><long-op>
	<lis	?lit ?aluop ?stackop >,
	<lil	?aluop >,
	0 ?all
1 3 foldable? dup if drop 0 4 1 lit-op-folds? then isconstraint
-->	<lil	1 ?? 2 ?? >.
	0 0 ?? >.
endrule

\ TBD: could generalize to include <lih (?high).
rule [<nopa><long-op>]><long-op>
	<lil	?aluop ?stackop >,
	0 ?all >,
	<lil	?aluop >,
	0 ?all
0 3 foldable? dup if drop 2 4 0 lit-op-folds? then isconstraint
-->	<lil	0 ?? 1 ?? >.
	0 2 ?? >.
endrule

\ Reduces long produced below to short.  Note: this rule has lower
\ priority than subsequent rules to avoid spurious changes back and forth
\ between short and long.
rule <long>to<short>
	<lil	nopb ?stackop >,
	0 ?all
1 short? isconstraint
-->	<lis	1 ?? nopb 0 ?? >.
endrule

\ Note: produces <long>; earlier rule will reduce back to <short>.
rule <short><short-op>
	<lis	?lit nopb ?stackop >,
	<lis	?lit ?aluop
0 2 3 lit-op-melds? isconstraint
-->	<lil	nopb 1 ?? >.
	0 0 ?? >.
endrule

rule <short><long-op>
	<lis	?lit nopb ?stackop >,
	<lil	?aluop >,
	0 ?all
0 3 2 lit-op-melds? isconstraint
-->	<lil	nopb 1 ?? >.
	0 0 ?? >.
endrule

rule <long><short-op>
	<lil	nopb ?stackop >,
	0 ?all >,
	<lis	?lit ?aluop
1 2 3 lit-op-melds? isconstraint
-->	<lil	nopb 0 ?? >.
	0 1 ?? >.
endrule

rule <long><long-op>
	<lil	nopb ?stackop >,
	0 ?all >,
	<lil	?aluop >,
	0 ?all
1 3 2 lit-op-melds? isconstraint
-->	<lil	nopb 0 ?? >.
	0 1 ?? >.
endrule

\ Note: produces <long>; earlier rule will reduce back to <short>.
rule <short><shifti>
	<lis	?lit nopb ?stackop >,
	<shifti	?lit ?shiftop
0 2 3 shift-op-melds? isconstraint
-->	<lil	nopb 1 ?? >.
	0 0 ?? >.
endrule

rule <long><shifti>
	<lil	nopb ?stackop >,
	0 ?all >,
	<shifti	?lit ?shiftop
1 2 3 shift-op-melds? isconstraint
-->	<lil	nopb 0 ?? >.
	0 1 ?? >.
endrule

rule [<nopa><shifti>]<shifti>
	<shifti	?lit ?shiftop ?stackop >,
	<shifti	?lit ?shiftop
1 4 shift-foldable? dup if drop 0 3 shift-op-folds? then isconstraint
-->	<shifti	0 ?? 1 ?? 2 ?? >.
endrule

\ ------------------------------------------------------------------------
\ Rules for shift instructions
\ Note: the shift rules take into account implementation of Forth lshift,
\ etc. as swap<shift>.

rule overswap<shift>
	<alu	nopb pushp >,
	<alu	nopb swapp >,
	<shift	?shiftop popp
-->	<shift	0 ?? >.
endrule

rule <short>swap<shift>
	<lis	?lit nopb pushp >,
	<alu	nopb swapp >,
	<shift	?shiftop popp
-->	<shifti	0 ?? 1 ?? >.
endrule

rule [nip<short>]swap<shift>
	<lis	?lit nopb swapp >,
	<alu	nopb swapp >,
	<shift	?shiftop popp
-->	<shifti	0 ?? 1 ?? popp >.
endrule

\ Note: other rules will do constant folding.
rule <short><short><shift>
	<lis	?lit nopb ?stackop >,
	<lis	?lit nopb pushp >,
	<shift	?shiftop popp
-->	<lis	2 ?? nopb 1 ?? >.
	<shifti	0 ?? 3 ?? >.
endrule

rule <nopa><shifti>
	<alu	nopa ?stackop >,
	<shifti	?lit ?shiftop
-->	<shifti	1 ?? 2 ?? 0 ?? >.
endrule


\ Note: paste following to test
\ 10 t-allot
\ t-here ?code !
        \ <reg@   popr nopa >.
        \ <reg@   popr nopb pushp >.
        \ <reg!   nopa udr popp >.
	\ <alu	nopb popp >.
