\ (c) 2004 Johns Hopkins University / Applied Physics Laboratory
\ Initialize process data structures
hex

noheads

\ The process descriptor is divided into a ROMable initialization structure
\ and a run-time structure in RAM.
\ NOTE: The code in this file and in process.fr exploits the representation
\ of the structure.
structure pd-init			\ process descriptor - initializer
   cell: .pd-run			\ run-time process descriptor
   cell: .lsp-init			\ local stack pointer (not used)
   cell: .psp-init			\ initial parameter stack pointer
   cell: .rsp-init			\ initial return stack pointer
\ process code must be compiled here
endstructure

\ define size of user space; all user variable must be declared by now
user-space forth @ host define user-size

\ the null process
align-stack 10 cells allot label nullrstack
align-stack 10 cells allot label nullpstack
label nullprocess
   user-size allot

rom label nullprocess-init		\ nullprocess initializer and code
  nullprocess , 0 , nullpstack , nullrstack , ram
]
  begin again				\ do nothing
[

\ default process
label defprocess
   user-size allot

\ Initialize default process at compile-time.  This is so that multitasking
\ version of pspreset will work.  This assumes that RAM can be initialized
\ in a ROM-based system.
pstack defprocess .psp-bot !		\ record bottom of parameter stack
defprocess cproc !

: init-cproc	\ ( -- ) Load current process descriptor register.
   defprocess !run ;

\ A fake context must be created for a process before it is run.
\			+-----------+---------------+
\ return stack:		| start pc  | 3 dummy words |
\			+-----------+---------------+---+
\ parameter stack:	|  initpcr  |   4 dummy words   |
\			+-----------+-------------------+
\ initpcr is loaded into the PCR and can be used to enable interrupts.
\ start pc is the starting address of the process' code

: initprocess	\ ( addr[pd-init] -- ) Initialize run-time
		\ data structures of a process:  the run-time process
		\ descriptor, user variables, and the stacks.
   dup @ >r				\ the address of run-time pd
   0 r@ .next !				\ no link
   0 r@ .pstate !			\ runnable
   dup .rsp-init @ 4 cells - r@ .rsp !	\ return stack: top
   dup .psp-init @ r@ .psp-bot !	\ parameter stack: bottom
   dup .psp-init @ 5 cells - r@ .psp !	\   and top
   defprocess pd-run + r@ pd-run +	\ initialize user variables
      [ user-size pd-run - ] literal cmove \  from default process
   #pcr-ie #pcr-se or r@ .psp @ !	\ enable interrupts and stack cache
   pd-init + r> .rsp @ ! ;		\ put init. pc on return stack

every-boot:	\ ( -- ) Init current process desc. and reset
		\ null process' stacks and descriptor.  Also initialize
		\ the process list so that the default process is at
		\ the head and the null process is at the end.
   nullprocess-init initprocess		\ initialize the null process
   0 defprocess .pstate !		\ make running process 'runnable'
   pstack defprocess .psp-bot !		\   parameter stacks
   defprocess !head			\ default process at head
   nullprocess defprocess !		\ followed by null process
;boot

heads
