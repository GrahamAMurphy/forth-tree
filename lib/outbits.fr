\ (c) 1995 Johns Hopkins University / Applied Physics Laboratory
\ Words for manipulating bits fields.  The hardware holding the word
\ is assumed to be write-only; the software maintains a copy of the
\ most recent value written.
hex

\ Usage example:
\   : store-hw ( x -- ) ... ;
\   ' store-hw out-port: porta
\	porta 0   bit:   .abit
\	porta 1 3 field: .cfield
\	porta 4   bit:   .bbit
\ 1 porta .abit out-bit!  porta .bbit out-bit@  2 porta .cfield out-field!

\ Reentrancy is the responsibility of the client.

\ The port data structure looks like:
\		     port
\		+------------+
\		|    copy    |
\		|------------|
\		| exec. addr |
\		+------------+

: out-port:	\ ( xt "name" -- ) Define a hardware output port.  xt
		\ is an execution token of code that writes data to the
		\ physical port; its stack picture must be ( x -- ).
		\ ( -- out-port ) The child returns the address of the port
		\ data structure.
   create 0 , , ;

: out-port!	\ ( x port -- ) Store x to port.
   2dup !  cell+ @ execute ;		\ store copy; call user-supplied save.

: out-port@	\ ( port -- x ) Return last port output, x.
   @ ;					\ Return cached value.

: out-bit!	\ ( 0/1 port mask -- ) Store bit, 0/1, to port at bit position
		\ indicated by mask.
   rot if over @ or else invert over @ and then swap out-port! ;

: out-bit@	\ ( port mask -- 0/1 ) Return bit, 0/1, from port at bit
		\ position indicated by mask.
   bit@ ;				\ Return cached value.

: out-field!	\ ( x port mask bit# -- ) Store x to port at field position
		\ indicated by mask and bit#.
   over >r >r invert over @ and
   rot r> lshift r> and or swap out-port! ;

: out-field@	\ ( port mask bit# -- x ) Return x from port at field position
		\ indicated by mask and bit#.
   field@ ;				\ Return cached value.

: out-refresh	\ ( port -- ) Re-copy cached port value to physical port.
   dup @ swap cell+ @ execute ;
