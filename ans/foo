/* (c) 1992 Johns Hopkins University / Applied Physics Laboratory */

#include <stdarg.h>
#include "defs.h"
#include "io.h"
#include "forth.h"				/* interface defined here */

#if defined(__STDC__) || defined(mips)	/* if ANS C. mips doesn't define this */

#define CAT(x,y) x##y
#else
#define ID(x) x
#define CAT(x,y) ID(x)y
#endif

#define cells_in_code_field 1

#ifdef __GNUC__

#define PRIMLIST()\
typedef void *token;
#define PRIM(primid)
#define ENDPRIMLIST()

#else

#define PRIMLIST()\
typedef enum {
#define PRIM(primid)\
CAT(T_,primid),
#define ENDPRIMLIST()\
b_o_g_u_s } token;

#endif

#define HEADEDDEF(defid, l, n1, n2, n3, n4, n5, h, dlink, bodylen)\
static struct { \
	header head; \
	cell body[bodylen + 1]; \
} CAT(D_,defid) = { \
	(unsigned char)l, n1,n2,n3,n4,n5, \
	h, dlink

#define IHEADEDDEF(defid, l, n1, n2, n3, n4, n5, h, dlink, bodylen)\
static struct { \
	header head; \
	cell body[bodylen + 1]; \
} CAT(D_,defid) = { \
	(unsigned char)l + 0x80, n1,n2,n3,n4,n5, \
	h, dlink

#define HEADLESSDEF(defid, bodylen)\
static struct { \
	cell body[bodylen + 1]; \
} CAT(D_,defid) = {

/* shorthand for finding pointer to body */
#define BODYOF(x) CAT(D_,x).body

#ifdef __GNUC__

#define SELF(primid)\
	(cell)&&CAT(T_,primid),
#define CODE(primid)\
	CAT(T_,primid): {
#define next goto **(w=*ip++)

#else

#define SELF(primid)\
	(cell)CAT(T_,primid),
#define CODE(primid)\
	case CAT(T_,primid): {
#define next break

#endif

#define ENDCODE()\
}

#define COLON()\
	SELF(docolon)

#define VARIABLE()\
	SELF(dovariable)

#define CONSTANT()\
	SELF(doconstant)

#define CREATE()\
	SELF(docreate)

#define OFFSET()\
	SELF(dooffset)

#define ENDDEF()\
};

#define SYMREFER(lab)\
	(cell)&lab,

#define ARRAYREFER(lab)\
	(cell)lab,

#define REFER(defid)\
	(cell)BODYOF(defid),

#define VALUE(n)\
	(cell)n,

#define BRANCH(defid,n)\
	(cell)&BODYOF(defid)[n+1],

#define NAMEREF(defid)\
	(cell)&CAT(D_,defid).head,
#define NULLREF()\
	0,

#define TABLE(lab)\
static cell lab[] ={
#define ENDTABLE()\
};

/* TBD: where should this stuff go? */
#define PSTACKSIZE 1024			/* stack sizes in cells */
#define RSTACKSIZE 1024
#define UNDERFLOW 2			/* size (in cells) of underflow buffer*/
#define IMMMASK 0x80

#define ENTRYINITFORTH	0
#define ENTRYDOFORTH	1
#define ENTRYEVALFORTH	2

typedef CELLTYPE	cell;
typedef SCELLTYPE	scell;

typedef struct {
	unsigned char name[6];		/* count and five characters */
	short wid;			/* wordlist id */
	cell link;			/* dictionary link */
} header;


#include <stdio.h>
#include <sys/types.h>
#include <errno.h>
#include "filewrap.h"

#include <errno.h>
/* here begins a very large C function; it is the Forth system! */
static void
interp(int entry, ...)
{
PRIMLIST()
PRIM(write_Mline)
PRIM(pop_Mstream)
PRIM(dovariable)
PRIM(_A)
PRIM(_K)
PRIM(_M)
PRIM(_P)
PRIM(_Q)
PRIM(_R)
PRIM(_T)
PRIM(_b)
PRIM(_c)
PRIM(doconstant)
PRIM(_d)
PRIM(delete_Mfile)
PRIM(_f)
PRIM(create_Mfile)
PRIM(_K_A)
PRIM(_R_J)
PRIM(_Q_K)
PRIM(_R_K)
PRIM(_T_J)
PRIM(_Q_M)
PRIM(_M_Q)
PRIM(resize_Mfile)
PRIM(_T_K)
PRIM(_R_M)
PRIM(_M_R)
PRIM(_T_M)
PRIM(_R_O)
PRIM(_M_T)
PRIM(_kparse_Mword)
PRIM(_T_O)
PRIM(i)
PRIM(j)
PRIM(_P_b)
PRIM(_P_c)
PRIM(file_Mstatus)
PRIM(push_Mstream)
PRIM(_Hinitlocals_I)
PRIM(c_A)
PRIM(d_K)
PRIM(w_A)
PRIM(d_b)
PRIM(c_f)
PRIM(r_d)
PRIM(_dr)
PRIM(u_b)
PRIM(r_f)
PRIM(u_d)
PRIM(w_f)
PRIM(or)
PRIM(_Rr_d)
PRIM(_R_dr)
PRIM(_Rr_f)
PRIM(_Asp)
PRIM(um_J)
PRIM(r_Oo)
PRIM(sp_P)
PRIM(w_Oo)
PRIM(d_ds)
PRIM(r_Ow)
PRIM(_fsp)
PRIM(_Hdo_I)
PRIM(and)
PRIM(bin)
PRIM(file_Mposition)
PRIM(nip)
PRIM(key)
PRIM(dup)
PRIM(not)
PRIM(rot)
PRIM(xor)
PRIM(codefieldsize)
PRIM(_Rdup)
PRIM(_edup)
PRIM(cell)
PRIM(free)
PRIM(emit)
PRIM(fkey)
PRIM(drop)
PRIM(tuck)
PRIM(move)
PRIM(swap)
PRIM(over)
PRIM(defaultcatcher)
PRIM(type)
PRIM(char_K)
PRIM(cell_K)
PRIM(cell_M)
PRIM(cell_O)
PRIM(_Rpick)
PRIM(_Spick)
PRIM(_Rdrop)
PRIM(body_d)
PRIM(_dbody)
PRIM(_Rswap)
PRIM(_Rover)
PRIM(_Hfind_I)
PRIM(catch)
PRIM(chdir)
PRIM(_Hloop_I)
PRIM(chars)
PRIM(_Hrpop_I)
PRIM(cells)
PRIM(reposition_Mfile)
PRIM(cmove)
PRIM(_kword)
PRIM(R0)
PRIM(rdrop)
PRIM(split)
PRIM(throw)
PRIM(_H_Kloop_I)
PRIM(um_Omod)
PRIM(cmove_d)
PRIM(_Hleave_I)
PRIM(branch)
PRIM(accept)
PRIM(negate)
PRIM(_kparse)
PRIM(lshift)
PRIM(ioinit)
PRIM(rotate)
PRIM(rshift)
PRIM(resize)
PRIM(within)
PRIM(R2)
PRIM(invert)
PRIM(perror)
PRIM(unloop)
PRIM(return)
PRIM(R1)
PRIM(_ebranch)
PRIM(push_Mblock_Mstream)
PRIM(get_Menv)
PRIM(_Ostring)
PRIM(_Hrfetch_I)
PRIM(aligned)
PRIM(dnegate)
PRIM(docolon)
PRIM(_Hrstore_I)
PRIM(execute)
PRIM(perform)
PRIM(spreset)
PRIM(_Hliteral_I)
PRIM(allocate)
PRIM(docreate)
PRIM(dooffset)
PRIM(read_Mfile)
PRIM(read_Mline)
PRIM(open_Mfile)
PRIM(file_Msize)
PRIM(doforeign)
PRIM(terminate)
PRIM(undoforth)
PRIM(close_Mfile)
PRIM(write_Mfile)
ENDPRIMLIST()
/*			data areas			*/

/* These variables are defined here because some assembly language
   primitives need to access them.  For example, push-stream must
   save the variables that describe the current input stream */
	static unsigned char *TIBPTR;	/* pointer to text input buffer */
#ifdef mips
/* there is a bug in the mips compiler that places IN in a register
   but fails to realize that IN in memory is being modified via a pointer */
	static volatile cell IN;	/* >IN buffer offset */
#else
	static cell IN;			/* >IN buffer offset */
#endif
	static cell NTIB;		/* #tib */
	static cell BLK;		/* blk */
	static cell SFILE;		/* 'source-id */

	static unsigned char **CURREGION;/* region pointer */

extern FILE *OUTPUTFP;

/* message for perror */
#define forthmsg "forth"

char *romode  = "r";
char *rwmode  = "r+";
char *womode  = "w";

char *robmode = "rb";
char *rwbmode = "rb+";
char *wobmode = "wb";


/* dictionary memory to be allocated by run-time system */
static cell DICT[250000];

HEADLESSDEF(docolon,0)
SELF(docolon)
ENDDEF()
HEADLESSDEF(return,0)
SELF(return)
ENDDEF()
static cell DEFAULTDOES =		/* hackery to avoid forward ref */
	(cell)BODYOF(return);		/* thread to return primitive */
HEADLESSDEF(dovariable,0)
SELF(dovariable)
ENDDEF()
HEADLESSDEF(doconstant,0)
SELF(doconstant)
ENDDEF()
HEADLESSDEF(dooffset,0)
SELF(dooffset)
ENDDEF()
HEADLESSDEF(docreate,0)
SELF(docreate)
ENDDEF()
HEADLESSDEF(doforeign,0)
SELF(doforeign)
ENDDEF()
HEADLESSDEF(_Hliteral_I,0)
SELF(_Hliteral_I)
ENDDEF()
HEADLESSDEF(branch,0)
SELF(branch)
ENDDEF()
HEADLESSDEF(_ebranch,0)
SELF(_ebranch)
ENDDEF()
HEADEDDEF(execute, 7, 101,120,101,99,117, 0, NULLREF(), 0)
SELF(execute)
ENDDEF()
HEADEDDEF(perform, 7, 112,101,114,102,111, 0, NULLREF(), 0)
SELF(perform)
ENDDEF()
HEADLESSDEF(_Hdo_I,0)
SELF(_Hdo_I)
ENDDEF()
HEADLESSDEF(_Hloop_I,0)
SELF(_Hloop_I)
ENDDEF()
HEADLESSDEF(_H_Kloop_I,0)
SELF(_H_Kloop_I)
ENDDEF()
HEADEDDEF(i, 1, 105,32,32,32,32, 0, NULLREF(), 0)
SELF(i)
ENDDEF()
HEADEDDEF(j, 1, 106,32,32,32,32, 0, NULLREF(), 0)
SELF(j)
ENDDEF()
HEADLESSDEF(_Hleave_I,0)
SELF(_Hleave_I)
ENDDEF()
HEADEDDEF(unloop, 6, 117,110,108,111,111, 0, NULLREF(), 0)
SELF(unloop)
ENDDEF()
HEADLESSDEF(undoforth,0)
SELF(undoforth)
ENDDEF()
HEADLESSDEF(defaultcatcher,0)
SELF(defaultcatcher)
ENDDEF()
static cell BOGUS =			/* bogus instruction stream */
	(cell)BODYOF(defaultcatcher);
HEADEDDEF(catch, 5, 99,97,116,99,104, 0, NULLREF(), 0)
SELF(catch)
ENDDEF()
HEADEDDEF(throw, 5, 116,104,114,111,119, 0, NULLREF(), 0)
SELF(throw)
ENDDEF()
HEADEDDEF(_Hrfetch_I, 8, 40,114,102,101,116, 0, NULLREF(), 0)
SELF(_Hrfetch_I)
ENDDEF()
HEADEDDEF(_Hrstore_I, 8, 40,114,115,116,111, 0, NULLREF(), 0)
SELF(_Hrstore_I)
ENDDEF()
HEADEDDEF(_Hrpop_I, 6, 40,114,112,111,112, 0, NULLREF(), 0)
SELF(_Hrpop_I)
ENDDEF()
HEADLESSDEF(_Hinitlocals_I,0)
SELF(_Hinitlocals_I)
ENDDEF()
HEADEDDEF(_A, 1, 33,32,32,32,32, 0, NULLREF(), 0)
SELF(_A)
ENDDEF()
HEADEDDEF(_Asp, 3, 33,115,112,32,32, 0, NULLREF(), 0)
SELF(_Asp)
ENDDEF()
HEADEDDEF(_K, 1, 43,32,32,32,32, 0, NULLREF(), 0)
SELF(_K)
ENDDEF()
HEADEDDEF(_K_A, 2, 43,33,32,32,32, 0, NULLREF(), 0)
SELF(_K_A)
ENDDEF()
HEADEDDEF(_M, 1, 45,32,32,32,32, 0, NULLREF(), 0)
SELF(_M)
ENDDEF()
HEADEDDEF(_M_Q, 2, 45,49,32,32,32, 0, NULLREF(), 0)
SELF(_M_Q)
ENDDEF()
HEADEDDEF(_M_R, 2, 45,50,32,32,32, 0, NULLREF(), 0)
SELF(_M_R)
ENDDEF()
HEADEDDEF(_M_T, 2, 45,52,32,32,32, 0, NULLREF(), 0)
SELF(_M_T)
ENDDEF()
HEADEDDEF(_P, 1, 48,32,32,32,32, 0, NULLREF(), 0)
SELF(_P)
ENDDEF()
HEADEDDEF(_P_b, 2, 48,60,32,32,32, 0, NULLREF(), 0)
SELF(_P_b)
ENDDEF()
HEADEDDEF(_P_c, 2, 48,61,32,32,32, 0, NULLREF(), 0)
SELF(_P_c)
ENDDEF()
HEADEDDEF(_Q, 1, 49,32,32,32,32, 0, NULLREF(), 0)
SELF(_Q)
ENDDEF()
HEADEDDEF(_Q_K, 2, 49,43,32,32,32, 0, NULLREF(), 0)
SELF(_Q_K)
ENDDEF()
HEADEDDEF(_Q_M, 2, 49,45,32,32,32, 0, NAMEREF(_M_Q), 0)
SELF(_Q_M)
ENDDEF()
HEADEDDEF(_R, 1, 50,32,32,32,32, 0, NULLREF(), 0)
SELF(_R)
ENDDEF()
HEADEDDEF(_R_K, 2, 50,43,32,32,32, 0, NULLREF(), 0)
SELF(_R_K)
ENDDEF()
HEADEDDEF(_R_M, 2, 50,45,32,32,32, 0, NAMEREF(_M_R), 0)
SELF(_R_M)
ENDDEF()
HEADEDDEF(_R_J, 2, 50,42,32,32,32, 0, NAMEREF(_Q_K), 0)
SELF(_R_J)
ENDDEF()
HEADEDDEF(_R_O, 2, 50,47,32,32,32, 0, NAMEREF(_M_T), 0)
SELF(_R_O)
ENDDEF()
HEADEDDEF(_Rpick, 5, 50,112,105,99,107, 0, NULLREF(), 0)
SELF(_Rpick)
ENDDEF()
HEADEDDEF(_Spick, 5, 51,112,105,99,107, 0, NULLREF(), 0)
SELF(_Spick)
ENDDEF()
HEADEDDEF(_T, 1, 52,32,32,32,32, 0, NAMEREF(throw), 0)
SELF(_T)
ENDDEF()
HEADEDDEF(_T_K, 2, 52,43,32,32,32, 0, NAMEREF(_R_M), 0)
SELF(_T_K)
ENDDEF()
HEADEDDEF(_T_M, 2, 52,45,32,32,32, 0, NAMEREF(_R_O), 0)
SELF(_T_M)
ENDDEF()
HEADEDDEF(_T_J, 2, 52,42,32,32,32, 0, NAMEREF(_Q_M), 0)
SELF(_T_J)
ENDDEF()
HEADEDDEF(_T_O, 2, 52,47,32,32,32, 0, NULLREF(), 0)
SELF(_T_O)
ENDDEF()
HEADEDDEF(_b, 1, 60,32,32,32,32, 0, NULLREF(), 0)
SELF(_b)
ENDDEF()
HEADEDDEF(_c, 1, 61,32,32,32,32, 0, NULLREF(), 0)
SELF(_c)
ENDDEF()
HEADEDDEF(_d, 1, 62,32,32,32,32, 0, NULLREF(), 0)
SELF(_d)
ENDDEF()
HEADEDDEF(_dbody, 5, 62,98,111,100,121, 0, NULLREF(), 0)
SELF(_dbody)
ENDDEF()
HEADEDDEF(_dr, 2, 62,114,32,32,32, 0, NULLREF(), 0)
SELF(_dr)
ENDDEF()
HEADEDDEF(_edup, 4, 63,100,117,112,32, 0, NULLREF(), 0)
SELF(_edup)
ENDDEF()
HEADEDDEF(_f, 1, 64,32,32,32,32, 0, NULLREF(), 0)
SELF(_f)
ENDDEF()
HEADEDDEF(_fsp, 3, 64,115,112,32,32, 0, NULLREF(), 0)
SELF(_fsp)
ENDDEF()
HEADEDDEF(and, 3, 97,110,100,32,32, 0, NULLREF(), 0)
SELF(and)
ENDDEF()
HEADEDDEF(body_d, 5, 98,111,100,121,62, 0, NAMEREF(_dbody), 0)
SELF(body_d)
ENDDEF()
HEADEDDEF(char_K, 5, 99,104,97,114,43, 0, NULLREF(), 0)
SELF(char_K)
ENDDEF()
HEADEDDEF(chars, 5, 99,104,97,114,115, 0, NULLREF(), 0)
SELF(chars)
ENDDEF()
HEADEDDEF(cell, 4, 99,101,108,108,32, 0, NULLREF(), 0)
SELF(cell)
ENDDEF()
HEADEDDEF(cell_K, 5, 99,101,108,108,43, 0, NULLREF(), 0)
SELF(cell_K)
ENDDEF()
HEADEDDEF(cell_M, 5, 99,101,108,108,45, 0, NAMEREF(_Hrfetch_I), 0)
SELF(cell_M)
ENDDEF()
HEADEDDEF(cells, 5, 99,101,108,108,115, 0, NULLREF(), 0)
SELF(cells)
ENDDEF()
HEADEDDEF(cell_O, 5, 99,101,108,108,47, 0, NULLREF(), 0)
SELF(cell_O)
ENDDEF()
HEADEDDEF(c_A, 2, 99,33,32,32,32, 0, NULLREF(), 0)
SELF(c_A)
ENDDEF()
HEADEDDEF(c_f, 2, 99,64,32,32,32, 0, NULLREF(), 0)
SELF(c_f)
ENDDEF()
HEADEDDEF(cmove, 5, 99,109,111,118,101, 0, NULLREF(), 0)
SELF(cmove)
ENDDEF()
HEADEDDEF(cmove_d, 6, 99,109,111,118,101, 0, NULLREF(), 0)
SELF(cmove_d)
ENDDEF()
HEADEDDEF(move, 4, 109,111,118,101,32, 0, NULLREF(), 0)
SELF(move)
ENDDEF()
HEADLESSDEF(codefieldsize,0)
SELF(codefieldsize)
ENDDEF()
HEADEDDEF(d_b, 2, 100,60,32,32,32, 0, NAMEREF(cell), 0)
SELF(d_b)
ENDDEF()
HEADEDDEF(dnegate, 7, 100,110,101,103,97, 0, NULLREF(), 0)
SELF(dnegate)
ENDDEF()
HEADEDDEF(d_K, 2, 100,43,32,32,32, 0, NULLREF(), 0)
SELF(d_K)
ENDDEF()
HEADEDDEF(d_ds, 3, 100,62,115,32,32, 0, NULLREF(), 0)
SELF(d_ds)
ENDDEF()
HEADEDDEF(drop, 4, 100,114,111,112,32, 0, NULLREF(), 0)
SELF(drop)
ENDDEF()
HEADEDDEF(dup, 3, 100,117,112,32,32, 0, NULLREF(), 0)
SELF(dup)
ENDDEF()
HEADEDDEF(invert, 6, 105,110,118,101,114, 0, NULLREF(), 0)
SELF(invert)
ENDDEF()
HEADEDDEF(lshift, 6, 108,115,104,105,102, 0, NULLREF(), 0)
SELF(lshift)
ENDDEF()
HEADEDDEF(negate, 6, 110,101,103,97,116, 0, NULLREF(), 0)
SELF(negate)
ENDDEF()
HEADEDDEF(nip, 3, 110,105,112,32,32, 0, NULLREF(), 0)
SELF(nip)
ENDDEF()
HEADEDDEF(not, 3, 110,111,116,32,32, 0, NULLREF(), 0)
SELF(not)
ENDDEF()
HEADEDDEF(or, 2, 111,114,32,32,32, 0, NULLREF(), 0)
SELF(or)
ENDDEF()
HEADEDDEF(over, 4, 111,118,101,114,32, 0, NULLREF(), 0)
SELF(over)
ENDDEF()
HEADEDDEF(r_d, 2, 114,62,32,32,32, 0, NAMEREF(_dr), 0)
SELF(r_d)
ENDDEF()
HEADEDDEF(r_f, 2, 114,64,32,32,32, 0, NULLREF(), 0)
SELF(r_f)
ENDDEF()
HEADEDDEF(rdrop, 5, 114,100,114,111,112, 0, NULLREF(), 0)
SELF(rdrop)
ENDDEF()
HEADEDDEF(rshift, 6, 114,115,104,105,102, 0, NULLREF(), 0)
SELF(rshift)
ENDDEF()
HEADEDDEF(aligned, 7, 97,108,105,103,110, 0, NULLREF(), 0)
SELF(aligned)
ENDDEF()
HEADEDDEF(rot, 3, 114,111,116,32,32, 0, NULLREF(), 0)
SELF(rot)
ENDDEF()
HEADEDDEF(rotate, 6, 114,111,116,97,116, 0, NAMEREF(d_K), 0)
SELF(rotate)
ENDDEF()
HEADEDDEF(sp_P, 3, 115,112,48,32,32, 0, NAMEREF(cells), 0)
SELF(sp_P)
ENDDEF()
HEADLESSDEF(spreset,0)
SELF(spreset)
ENDDEF()
HEADEDDEF(swap, 4, 115,119,97,112,32, 0, NULLREF(), 0)
SELF(swap)
ENDDEF()
HEADEDDEF(tuck, 4, 116,117,99,107,32, 0, NAMEREF(move), 0)
SELF(tuck)
ENDDEF()
HEADEDDEF(u_b, 2, 117,60,32,32,32, 0, NULLREF(), 0)
SELF(u_b)
ENDDEF()
HEADEDDEF(u_d, 2, 117,62,32,32,32, 0, NULLREF(), 0)
SELF(u_d)
ENDDEF()
HEADEDDEF(um_J, 3, 117,109,42,32,32, 0, NULLREF(), 0)
SELF(um_J)
ENDDEF()
HEADEDDEF(um_Omod, 6, 117,109,47,109,111, 0, NAMEREF(not), 0)
SELF(um_Omod)
ENDDEF()
HEADEDDEF(w_A, 2, 119,33,32,32,32, 0, NAMEREF(invert), 0)
SELF(w_A)
ENDDEF()
HEADEDDEF(w_f, 2, 119,64,32,32,32, 0, NAMEREF(tuck), 0)
SELF(w_f)
ENDDEF()
HEADEDDEF(within, 6, 119,105,116,104,105, 0, NULLREF(), 0)
SELF(within)
ENDDEF()
HEADEDDEF(xor, 3, 120,111,114,32,32, 0, NULLREF(), 0)
SELF(xor)
ENDDEF()
HEADEDDEF(_R_dr, 3, 50,62,114,32,32, 0, NULLREF(), 0)
SELF(_R_dr)
ENDDEF()
HEADEDDEF(_Rr_d, 3, 50,114,62,32,32, 0, NAMEREF(_R_dr), 0)
SELF(_Rr_d)
ENDDEF()
HEADEDDEF(_Rr_f, 3, 50,114,64,32,32, 0, NULLREF(), 0)
SELF(_Rr_f)
ENDDEF()
HEADEDDEF(_Rdrop, 5, 50,100,114,111,112, 0, NULLREF(), 0)
SELF(_Rdrop)
ENDDEF()
HEADEDDEF(_Rdup, 4, 50,100,117,112,32, 0, NULLREF(), 0)
SELF(_Rdup)
ENDDEF()
HEADEDDEF(_Rover, 5, 50,111,118,101,114, 0, NULLREF(), 0)
SELF(_Rover)
ENDDEF()
HEADEDDEF(_Rswap, 5, 50,115,119,97,112, 0, NULLREF(), 0)
SELF(_Rswap)
ENDDEF()
HEADEDDEF(push_Mstream, 11, 112,117,115,104,45, 0, NULLREF(), 0)
SELF(push_Mstream)
ENDDEF()
HEADEDDEF(push_Mblock_Mstream, 17, 112,117,115,104,45, 0, NAMEREF(u_b), 0)
SELF(push_Mblock_Mstream)
ENDDEF()
HEADEDDEF(pop_Mstream, 10, 112,111,112,45,115, 0, NULLREF(), 0)
SELF(pop_Mstream)
ENDDEF()
HEADLESSDEF(_Hfind_I,0)
SELF(_Hfind_I)
ENDDEF()
HEADLESSDEF(_kparse,0)
SELF(_kparse)
ENDDEF()
HEADLESSDEF(_kparse_Mword,0)
SELF(_kparse_Mword)
ENDDEF()
HEADLESSDEF(_kword,0)
SELF(_kword)
ENDDEF()
HEADEDDEF(_Ostring, 7, 47,115,116,114,105, 0, NULLREF(), 0)
SELF(_Ostring)
ENDDEF()
HEADEDDEF(split, 5, 115,112,108,105,116, 0, NULLREF(), 0)
SELF(split)
ENDDEF()
HEADEDDEF(fkey, 4, 102,107,101,121,32, 0, NULLREF(), 0)
SELF(fkey)
ENDDEF()
HEADEDDEF(bin, 3, 98,105,110,32,32, 0, NULLREF(), 0)
SELF(bin)
ENDDEF()
HEADEDDEF(close_Mfile, 10, 99,108,111,115,101, 0, NULLREF(), 0)
SELF(close_Mfile)
ENDDEF()
HEADEDDEF(create_Mfile, 11, 99,114,101,97,116, 0, NULLREF(), 0)
SELF(create_Mfile)
ENDDEF()
HEADEDDEF(delete_Mfile, 11, 100,101,108,101,116, 0, NAMEREF(_f), 0)
SELF(delete_Mfile)
ENDDEF()
HEADEDDEF(file_Mposition, 13, 102,105,108,101,45, 0, NULLREF(), 0)
SELF(file_Mposition)
ENDDEF()
HEADEDDEF(file_Msize, 9, 102,105,108,101,45, 0, NAMEREF(_edup), 0)
SELF(file_Msize)
ENDDEF()
HEADEDDEF(file_Mstatus, 11, 102,105,108,101,45, 0, NULLREF(), 0)
SELF(file_Mstatus)
ENDDEF()
HEADEDDEF(open_Mfile, 9, 111,112,101,110,45, 0, NULLREF(), 0)
SELF(open_Mfile)
ENDDEF()
HEADEDDEF(r_Oo, 3, 114,47,111,32,32, 0, NULLREF(), 0)
SELF(r_Oo)
ENDDEF()
HEADEDDEF(r_Ow, 3, 114,47,119,32,32, 0, NULLREF(), 0)
SELF(r_Ow)
ENDDEF()
HEADEDDEF(read_Mfile, 9, 114,101,97,100,45, 0, NAMEREF(i), 0)
SELF(read_Mfile)
ENDDEF()
HEADEDDEF(read_Mline, 9, 114,101,97,100,45, 0, NAMEREF(file_Mstatus), 0)
SELF(read_Mline)
ENDDEF()
HEADEDDEF(reposition_Mfile, 15, 114,101,112,111,115, 0, NULLREF(), 0)
SELF(reposition_Mfile)
ENDDEF()
HEADEDDEF(resize_Mfile, 11, 114,101,115,105,122, 0, NAMEREF(_T_K), 0)
SELF(resize_Mfile)
ENDDEF()
HEADEDDEF(w_Oo, 3, 119,47,111,32,32, 0, NAMEREF(d_ds), 0)
SELF(w_Oo)
ENDDEF()
HEADEDDEF(write_Mfile, 10, 119,114,105,116,101, 0, NULLREF(), 0)
SELF(write_Mfile)
ENDDEF()
HEADEDDEF(write_Mline, 10, 119,114,105,116,101, 0, NULLREF(), 0)
SELF(write_Mline)
ENDDEF()
HEADEDDEF(perror, 6, 112,101,114,114,111, 0, NULLREF(), 0)
SELF(perror)
ENDDEF()
HEADEDDEF(R0, 5, 115,116,100,105,110, 0, NULLREF(), 0)
SELF(R0)
ENDDEF()
HEADEDDEF(R1, 6, 115,116,100,111,117, 0, NAMEREF(c_f), 0)
SELF(R1)
ENDDEF()
HEADEDDEF(R2, 6, 115,116,100,101,114, 0, NULLREF(), 0)
SELF(R2)
ENDDEF()
HEADEDDEF(terminate, 9, 116,101,114,109,105, 0, NAMEREF(char_K), 0)
SELF(terminate)
ENDDEF()
HEADEDDEF(chdir, 5, 99,104,100,105,114, 0, NULLREF(), 0)
SELF(chdir)
ENDDEF()
HEADEDDEF(get_Menv, 7, 103,101,116,45,101, 0, NULLREF(), 0)
SELF(get_Menv)
ENDDEF()
HEADEDDEF(allocate, 8, 97,108,108,111,99, 0, NULLREF(), 0)
SELF(allocate)
ENDDEF()
HEADEDDEF(free, 4, 102,114,101,101,32, 0, NULLREF(), 0)
SELF(free)
ENDDEF()
HEADEDDEF(resize, 6, 114,101,115,105,122, 0, NULLREF(), 0)
SELF(resize)
ENDDEF()
HEADEDDEF(output_Mfile, 11, 111,117,116,112,117, 0, NULLREF(), 1)
CONSTANT()
SYMREFER(OUTPUTFP)
ENDDEF()
HEADEDDEF(key, 3, 107,101,121,32,32, 0, NAMEREF(dup), 0)
SELF(key)
ENDDEF()
HEADEDDEF(accept, 6, 97,99,99,101,112, 0, NULLREF(), 0)
SELF(accept)
ENDDEF()
HEADEDDEF(emit, 4, 101,109,105,116,32, 0, NAMEREF(fkey), 0)
SELF(emit)
ENDDEF()
HEADEDDEF(type, 4, 116,121,112,101,32, 0, NULLREF(), 0)
SELF(type)
ENDDEF()
HEADEDDEF(cr, 2, 99,114,32,32,32, 0, NULLREF(), 4)
COLON()
REFER(_Hliteral_I)
VALUE(0xa)
REFER(emit)
REFER(return)
ENDDEF()
HEADLESSDEF(ioinit,0)
SELF(ioinit)
ENDDEF()
HEADEDDEF(kib, 3, 107,105,98,32,32, 0, NULLREF(), 33)
CREATE()
SYMREFER(DEFAULTDOES)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
ENDDEF()
HEADEDDEF(sourceptr, 9, 115,111,117,114,99, 0, NAMEREF(_Rdrop), 1)
CONSTANT()
SYMREFER(TIBPTR)
ENDDEF()
HEADEDDEF(_din, 3, 62,105,110,32,32, 0, NAMEREF(w_Oo), 1)
CONSTANT()
SYMREFER(IN)
ENDDEF()
HEADEDDEF(_Csource, 7, 35,115,111,117,114, 0, NULLREF(), 1)
CONSTANT()
SYMREFER(NTIB)
ENDDEF()
HEADEDDEF(blk, 3, 98,108,107,32,32, 0, NAMEREF(bin), 1)
CONSTANT()
SYMREFER(BLK)
ENDDEF()
HEADEDDEF(_Gsource_Mid, 10, 39,115,111,117,114, 0, NAMEREF(r_f), 1)
CONSTANT()
SYMREFER(SFILE)
ENDDEF()
HEADEDDEF(_Gsource, 7, 39,115,111,117,114, 0, NULLREF(), 1)
VARIABLE()
VALUE(0x0)
ENDDEF()
HEADEDDEF(dp_P, 3, 100,112,48,32,32, 0, NAMEREF(_Asp), 1)
CONSTANT()
ARRAYREFER(DICT)
ENDDEF()
HEADLESSDEF(regionptr,1)
CONSTANT()
SYMREFER(CURREGION)
ENDDEF()
HEADEDDEF(stdregion, 9, 115,116,100,114,101, 0, NAMEREF(cell_O), 1)
VARIABLE()
VALUE(0x0)
ENDDEF()
HEADEDDEF(state, 5, 115,116,97,116,101, 0, NAMEREF(_A), 1)
VARIABLE()
VALUE(0x0)
ENDDEF()
HEADEDDEF(base, 4, 98,97,115,101,32, 0, NULLREF(), 1)
VARIABLE()
VALUE(0x0)
ENDDEF()
HEADLESSDEF(last_Mcolon,1)
VARIABLE()
VALUE(0x0)
ENDDEF()
HEADEDDEF(last, 4, 108,97,115,116,32, 0, NAMEREF(_Csource), 1)
VARIABLE()
VALUE(0x0)
ENDDEF()
HEADLESSDEF(hashtablesize,1)
CONSTANT()
VALUE(0x100)
ENDDEF()
HEADLESSDEF(hashtable,1)
CONSTANT()
VALUE(0x0)
ENDDEF()
HEADEDDEF(forth_Mwordlist, 14, 102,111,114,116,104, 0, NULLREF(), 1)
CONSTANT()
VALUE(0x0)
ENDDEF()
HEADLESSDEF(loc_Mwordlist,1)
CONSTANT()
VALUE(0x1)
ENDDEF()
HEADLESSDEF(vocabtag,1)
VARIABLE()
VALUE(0x0)
ENDDEF()
HEADEDDEF(current, 7, 99,117,114,114,101, 0, NAMEREF(catch), 1)
VARIABLE()
VALUE(0x0)
ENDDEF()
HEADEDDEF(_Corder, 6, 35,111,114,100,101, 0, NULLREF(), 1)
VARIABLE()
VALUE(0x0)
ENDDEF()
HEADEDDEF(_Cvocs, 5, 35,118,111,99,115, 0, NULLREF(), 1)
CONSTANT()
VALUE(0x8)
ENDDEF()
HEADEDDEF(context, 7, 99,111,110,116,101, 0, NULLREF(), 9)
CREATE()
SYMREFER(DEFAULTDOES)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
ENDDEF()
HEADLESSDEF(leavings,1)
VARIABLE()
VALUE(0x0)
ENDDEF()
HEADLESSDEF(_Clocals,1)
VARIABLE()
VALUE(0x0)
ENDDEF()
HEADLESSDEF(_Cloops,1)
VARIABLE()
VALUE(0x0)
ENDDEF()
HEADLESSDEF(defaultdoes,1)
CONSTANT()
SYMREFER(DEFAULTDOES)
ENDDEF()
HEADEDDEF(true, 4, 116,114,117,101,32, 0, NULLREF(), 1)
CONSTANT()
VALUE(0xffffffff)
ENDDEF()
HEADEDDEF(false, 5, 102,97,108,115,101, 0, NULLREF(), 1)
CONSTANT()
VALUE(0x0)
ENDDEF()
HEADEDDEF(bl, 2, 98,108,32,32,32, 0, NULLREF(), 1)
CONSTANT()
VALUE(0x20)
ENDDEF()
HEADEDDEF(namesize, 8, 110,97,109,101,115, 0, NAMEREF(_R_J), 1)
CONSTANT()
VALUE(0x6)
ENDDEF()
HEADEDDEF(_dname, 5, 62,110,97,109,101, 0, NULLREF(), 1)
OFFSET()
VALUE(0xfffffff4)
ENDDEF()
HEADEDDEF(_dlink, 5, 62,108,105,110,107, 0, NAMEREF(body_d), 1)
OFFSET()
VALUE(0xfffffffc)
ENDDEF()
HEADEDDEF(name_d, 5, 110,97,109,101,62, 0, NAMEREF(_dname), 1)
OFFSET()
VALUE(0xc)
ENDDEF()
HEADEDDEF(link_d, 5, 108,105,110,107,62, 0, NAMEREF(_dlink), 1)
OFFSET()
VALUE(0x4)
ENDDEF()
HEADEDDEF(_Mrot, 4, 45,114,111,116,32, 0, NULLREF(), 3)
COLON()
REFER(rot)
REFER(rot)
REFER(return)
ENDDEF()
HEADEDDEF(_J, 1, 42,32,32,32,32, 0, NULLREF(), 3)
COLON()
REFER(um_J)
REFER(drop)
REFER(return)
ENDDEF()
HEADEDDEF(s_dd, 3, 115,62,100,32,32, 0, NAMEREF(_din), 3)
COLON()
REFER(dup)
REFER(_P_b)
REFER(return)
ENDDEF()
HEADEDDEF(_K_M, 2, 43,45,32,32,32, 0, NAMEREF(cmove_d), 5)
COLON()
REFER(_P_b)
REFER(_ebranch)
BRANCH(_K_M,4)
REFER(negate)
REFER(return)
ENDDEF()
HEADEDDEF(d_K_M, 3, 100,43,45,32,32, 0, NAMEREF(over), 5)
COLON()
REFER(_P_b)
REFER(_ebranch)
BRANCH(d_K_M,4)
REFER(dnegate)
REFER(return)
ENDDEF()
HEADEDDEF(abs, 3, 97,98,115,32,32, 0, NAMEREF(kib), 3)
COLON()
REFER(dup)
REFER(_K_M)
REFER(return)
ENDDEF()
HEADEDDEF(dabs, 4, 100,97,98,115,32, 0, NAMEREF(perror), 3)
COLON()
REFER(dup)
REFER(d_K_M)
REFER(return)
ENDDEF()
HEADEDDEF(_P_d, 2, 48,62,32,32,32, 0, NULLREF(), 3)
COLON()
REFER(_P)
REFER(_d)
REFER(return)
ENDDEF()
HEADEDDEF(max, 3, 109,97,120,32,32, 0, NULLREF(), 7)
COLON()
REFER(_Rdup)
REFER(_b)
REFER(_ebranch)
BRANCH(max,5)
REFER(swap)
REFER(drop)
REFER(return)
ENDDEF()
HEADEDDEF(min, 3, 109,105,110,32,32, 0, NULLREF(), 7)
COLON()
REFER(_Rdup)
REFER(_d)
REFER(_ebranch)
BRANCH(min,5)
REFER(swap)
REFER(drop)
REFER(return)
ENDDEF()
HEADEDDEF(umax, 4, 117,109,97,120,32, 0, NAMEREF(swap), 7)
COLON()
REFER(_Rdup)
REFER(u_b)
REFER(_ebranch)
BRANCH(umax,5)
REFER(swap)
REFER(drop)
REFER(return)
ENDDEF()
HEADEDDEF(umin, 4, 117,109,105,110,32, 0, NULLREF(), 7)
COLON()
REFER(_Rdup)
REFER(u_d)
REFER(_ebranch)
BRANCH(umin,5)
REFER(swap)
REFER(drop)
REFER(return)
ENDDEF()
HEADEDDEF(_b_d, 2, 60,62,32,32,32, 0, NULLREF(), 3)
COLON()
REFER(_c)
REFER(not)
REFER(return)
ENDDEF()
HEADEDDEF(_R_A, 2, 50,33,32,32,32, 0, NULLREF(), 6)
COLON()
REFER(swap)
REFER(over)
REFER(_A)
REFER(cell_K)
REFER(_A)
REFER(return)
ENDDEF()
HEADEDDEF(_R_f, 2, 50,64,32,32,32, 0, NULLREF(), 6)
COLON()
REFER(dup)
REFER(cell_K)
REFER(_f)
REFER(swap)
REFER(_f)
REFER(return)
ENDDEF()
HEADLESSDEF(pspreset,3)
COLON()
REFER(sp_P)
REFER(_Asp)
REFER(return)
ENDDEF()
HEADEDDEF(um_Jm, 4, 117,109,42,109,32, 0, NAMEREF(push_Mstream), 10)
COLON()
REFER(swap)
REFER(over)
REFER(um_J)
REFER(drop)
REFER(_dr)
REFER(um_J)
REFER(_P)
REFER(r_d)
REFER(d_K)
REFER(return)
ENDDEF()
HEADEDDEF(m_Ommod, 6, 109,47,109,109,111, 0, NAMEREF(key), 10)
COLON()
REFER(_dr)
REFER(_P)
REFER(r_f)
REFER(um_Omod)
REFER(r_d)
REFER(swap)
REFER(_dr)
REFER(um_Omod)
REFER(r_d)
REFER(return)
ENDDEF()
HEADEDDEF(m_J, 2, 109,42,32,32,32, 0, NULLREF(), 10)
COLON()
REFER(_Rdup)
REFER(xor)
REFER(_dr)
REFER(abs)
REFER(swap)
REFER(abs)
REFER(um_J)
REFER(r_d)
REFER(d_K_M)
REFER(return)
ENDDEF()
HEADEDDEF(sm_Orem, 6, 115,109,47,114,101, 0, NAMEREF(_R_A), 17)
COLON()
REFER(over)
REFER(_dr)
REFER(_Rdup)
REFER(xor)
REFER(_dr)
REFER(_dr)
REFER(dabs)
REFER(r_d)
REFER(abs)
REFER(um_Omod)
REFER(r_d)
REFER(_K_M)
REFER(swap)
REFER(r_d)
REFER(_K_M)
REFER(swap)
REFER(return)
ENDDEF()
HEADEDDEF(fm_Omod, 6, 102,109,47,109,111, 0, NAMEREF(file_Mposition), 33)
COLON()
REFER(dup)
REFER(_dr)
REFER(_Rdup)
REFER(xor)
REFER(_dr)
REFER(_dr)
REFER(dabs)
REFER(r_d)
REFER(abs)
REFER(um_Omod)
REFER(r_f)
REFER(_K_M)
REFER(r_d)
REFER(rot)
REFER(r_f)
REFER(_K_M)
REFER(swap)
REFER(_P_b)
REFER(over)
REFER(and)
REFER(_ebranch)
BRANCH(fm_Omod,29)
REFER(negate)
REFER(r_d)
REFER(_K)
REFER(swap)
REFER(_Q_M)
REFER(branch)
BRANCH(fm_Omod,32)
REFER(r_d)
REFER(drop)
REFER(swap)
REFER(return)
ENDDEF()
HEADEDDEF(_Omod, 4, 47,109,111,100,32, 0, NULLREF(), 5)
COLON()
REFER(_dr)
REFER(s_dd)
REFER(r_d)
REFER(fm_Omod)
REFER(return)
ENDDEF()
HEADEDDEF(_O, 1, 47,32,32,32,32, 0, NULLREF(), 3)
COLON()
REFER(_Omod)
REFER(nip)
REFER(return)
ENDDEF()
HEADEDDEF(mod, 3, 109,111,100,32,32, 0, NAMEREF(delete_Mfile), 3)
COLON()
REFER(_Omod)
REFER(drop)
REFER(return)
ENDDEF()
HEADEDDEF(_J_Omod, 5, 42,47,109,111,100, 0, NULLREF(), 5)
COLON()
REFER(_dr)
REFER(m_J)
REFER(r_d)
REFER(fm_Omod)
REFER(return)
ENDDEF()
HEADEDDEF(_J_O, 2, 42,47,32,32,32, 0, NAMEREF(xor), 3)
COLON()
REFER(_J_Omod)
REFER(nip)
REFER(return)
ENDDEF()
HEADEDDEF(depth, 5, 100,101,112,116,104, 0, NAMEREF(s_dd), 6)
COLON()
REFER(_fsp)
REFER(sp_P)
REFER(swap)
REFER(_M)
REFER(cell_O)
REFER(return)
ENDDEF()
HEADEDDEF(pick, 4, 112,105,99,107,32, 0, NULLREF(), 6)
COLON()
REFER(_Q_K)
REFER(cells)
REFER(_fsp)
REFER(_K)
REFER(_f)
REFER(return)
ENDDEF()
HEADEDDEF(fill, 4, 102,105,108,108,32, 0, NAMEREF(pick), 16)
COLON()
REFER(swap)
REFER(_edup)
REFER(_ebranch)
BRANCH(fill,14)
REFER(_dr)
REFER(over)
REFER(c_A)
REFER(dup)
REFER(_Q_K)
REFER(r_d)
REFER(_Q_M)
REFER(cmove)
REFER(branch)
BRANCH(fill,15)
REFER(_Rdrop)
REFER(return)
ENDDEF()
HEADEDDEF(roll, 4, 114,111,108,108,32, 0, NAMEREF(umin), 12)
COLON()
REFER(dup)
REFER(_dr)
REFER(pick)
REFER(_fsp)
REFER(dup)
REFER(cell_K)
REFER(r_d)
REFER(_Q_K)
REFER(cells)
REFER(cmove_d)
REFER(drop)
REFER(return)
ENDDEF()
HEADEDDEF(hex, 3, 104,101,120,32,32, 0, NAMEREF(allocate), 5)
COLON()
REFER(_Hliteral_I)
VALUE(0x10)
REFER(base)
REFER(_A)
REFER(return)
ENDDEF()
HEADEDDEF(decimal, 7, 100,101,99,105,109, 0, NAMEREF(stdregion), 5)
COLON()
REFER(_Hliteral_I)
VALUE(0xa)
REFER(base)
REFER(_A)
REFER(return)
ENDDEF()
HEADEDDEF(octal, 5, 111,99,116,97,108, 0, NAMEREF(sp_P), 5)
COLON()
REFER(_Hliteral_I)
VALUE(0x8)
REFER(base)
REFER(_A)
REFER(return)
ENDDEF()
IHEADEDDEF(_g, 1, 91,32,32,32,32, 0, NULLREF(), 4)
COLON()
REFER(_P)
REFER(state)
REFER(_A)
REFER(return)
ENDDEF()
HEADEDDEF(_i, 1, 93,32,32,32,32, 0, NAMEREF(_R_K), 4)
COLON()
REFER(_Q)
REFER(state)
REFER(_A)
REFER(return)
ENDDEF()
HEADEDDEF(dp, 2, 100,112,32,32,32, 0, NAMEREF(aligned), 3)
COLON()
REFER(regionptr)
REFER(_f)
REFER(return)
ENDDEF()
HEADEDDEF(allocatefrom, 12, 97,108,108,111,99, 0, NULLREF(), 3)
COLON()
REFER(regionptr)
REFER(_A)
REFER(return)
ENDDEF()
HEADEDDEF(here, 4, 104,101,114,101,32, 0, NULLREF(), 3)
COLON()
REFER(dp)
REFER(_f)
REFER(return)
ENDDEF()
HEADEDDEF(pad, 3, 112,97,100,32,32, 0, NULLREF(), 5)
COLON()
REFER(here)
REFER(_Hliteral_I)
VALUE(0x50)
REFER(_K)
REFER(return)
ENDDEF()
HEADEDDEF(latest, 6, 108,97,116,101,115, 0, NULLREF(), 3)
COLON()
REFER(last)
REFER(_f)
REFER(return)
ENDDEF()
HEADEDDEF(align, 5, 97,108,105,103,110, 0, NAMEREF(false), 5)
COLON()
REFER(here)
REFER(aligned)
REFER(dp)
REFER(_A)
REFER(return)
ENDDEF()
HEADEDDEF(allot, 5, 97,108,108,111,116, 0, NULLREF(), 3)
COLON()
REFER(dp)
REFER(_K_A)
REFER(return)
ENDDEF()
HEADEDDEF(_L, 1, 44,32,32,32,32, 0, NAMEREF(split), 5)
COLON()
REFER(here)
REFER(_A)
REFER(cell)
REFER(allot)
REFER(return)
ENDDEF()
HEADEDDEF(w_L, 2, 119,44,32,32,32, 0, NAMEREF(R1), 5)
COLON()
REFER(here)
REFER(w_A)
REFER(_R)
REFER(allot)
REFER(return)
ENDDEF()
HEADEDDEF(c_L, 2, 99,44,32,32,32, 0, NAMEREF(rotate), 5)
COLON()
REFER(here)
REFER(c_A)
REFER(_Q)
REFER(allot)
REFER(return)
ENDDEF()
HEADEDDEF(compile, 7, 99,111,109,112,105, 0, NULLREF(), 7)
COLON()
REFER(r_d)
REFER(dup)
REFER(_f)
REFER(_L)
REFER(cell_K)
REFER(_dr)
REFER(return)
ENDDEF()
HEADLESSDEF(compileprim,11)
COLON()
REFER(r_d)
REFER(dup)
REFER(_f)
REFER(here)
REFER(codefieldsize)
REFER(allot)
REFER(codefieldsize)
REFER(move)
REFER(cell_K)
REFER(_dr)
REFER(return)
ENDDEF()
HEADEDDEF(compile_L, 8, 99,111,109,112,105, 0, NAMEREF(depth), 2)
COLON()
REFER(_L)
REFER(return)
ENDDEF()
HEADEDDEF(_bmark, 5, 60,109,97,114,107, 0, NAMEREF(sourceptr), 2)
COLON()
REFER(here)
REFER(return)
ENDDEF()
HEADEDDEF(_bresolve, 8, 60,114,101,115,111, 0, NAMEREF(_b), 2)
COLON()
REFER(_L)
REFER(return)
ENDDEF()
HEADEDDEF(_dmark, 5, 62,109,97,114,107, 0, NAMEREF(compile), 4)
COLON()
REFER(here)
REFER(_P)
REFER(_L)
REFER(return)
ENDDEF()
HEADEDDEF(_dresolve, 8, 62,114,101,115,111, 0, NAMEREF(_d), 4)
COLON()
REFER(here)
REFER(swap)
REFER(_A)
REFER(return)
ENDDEF()
HEADEDDEF(_dmarks, 6, 62,109,97,114,107, 0, NAMEREF(namesize), 7)
COLON()
REFER(here)
REFER(leavings)
REFER(_f)
REFER(_L)
REFER(leavings)
REFER(_A)
REFER(return)
ENDDEF()
HEADEDDEF(_dresolves, 9, 62,114,101,115,111, 0, NAMEREF(push_Mblock_Mstream), 19)
COLON()
REFER(leavings)
REFER(_f)
REFER(_Rdup)
REFER(u_b)
REFER(_ebranch)
BRANCH(_dresolves,15)
REFER(dup)
REFER(_f)
REFER(_dr)
REFER(here)
REFER(swap)
REFER(_A)
REFER(r_d)
REFER(branch)
BRANCH(_dresolves,2)
REFER(leavings)
REFER(_A)
REFER(drop)
REFER(return)
ENDDEF()
IHEADEDDEF(if, 2, 105,102,32,32,32, 0, NAMEREF(decimal), 4)
COLON()
REFER(compile)
REFER(_ebranch)
REFER(_dmark)
REFER(return)
ENDDEF()
IHEADEDDEF(else, 4, 101,108,115,101,32, 0, NULLREF(), 6)
COLON()
REFER(compile)
REFER(branch)
REFER(_dmark)
REFER(swap)
REFER(_dresolve)
REFER(return)
ENDDEF()
IHEADEDDEF(then, 4, 116,104,101,110,32, 0, NAMEREF(emit), 2)
COLON()
REFER(_dresolve)
REFER(return)
ENDDEF()
IHEADEDDEF(begin, 5, 98,101,103,105,110, 0, NAMEREF(context), 2)
COLON()
REFER(_bmark)
REFER(return)
ENDDEF()
IHEADEDDEF(while, 5, 119,104,105,108,101, 0, NAMEREF(reposition_Mfile), 5)
COLON()
REFER(compile)
REFER(_ebranch)
REFER(_dmark)
REFER(swap)
REFER(return)
ENDDEF()
IHEADEDDEF(until, 5, 117,110,116,105,108, 0, NAMEREF(_L), 4)
COLON()
REFER(compile)
REFER(_ebranch)
REFER(_bresolve)
REFER(return)
ENDDEF()
IHEADEDDEF(repeat, 6, 114,101,112,101,97, 0, NULLREF(), 5)
COLON()
REFER(compile)
REFER(branch)
REFER(_bresolve)
REFER(_dresolve)
REFER(return)
ENDDEF()
IHEADEDDEF(again, 5, 97,103,97,105,110, 0, NAMEREF(write_Mline), 4)
COLON()
REFER(compile)
REFER(branch)
REFER(_bresolve)
REFER(return)
ENDDEF()
IHEADEDDEF(leave, 5, 108,101,97,118,101, 0, NULLREF(), 4)
COLON()
REFER(compile)
REFER(_Hleave_I)
REFER(_dmarks)
REFER(return)
ENDDEF()
IHEADEDDEF(do, 2, 100,111,32,32,32, 0, NULLREF(), 7)
COLON()
REFER(compile)
REFER(_Hdo_I)
REFER(_bmark)
REFER(_Q)
REFER(_Cloops)
REFER(_K_A)
REFER(return)
ENDDEF()
IHEADEDDEF(loop, 4, 108,111,111,112,32, 0, NULLREF(), 9)
COLON()
REFER(compile)
REFER(_Hloop_I)
REFER(dup)
REFER(_bresolve)
REFER(_dresolves)
REFER(_M_Q)
REFER(_Cloops)
REFER(_K_A)
REFER(return)
ENDDEF()
IHEADEDDEF(_Kloop, 5, 43,108,111,111,112, 0, NULLREF(), 9)
COLON()
REFER(compile)
REFER(_H_Kloop_I)
REFER(dup)
REFER(_bresolve)
REFER(_dresolves)
REFER(_M_Q)
REFER(_Cloops)
REFER(_K_A)
REFER(return)
ENDDEF()
IHEADEDDEF(sel, 3, 115,101,108,32,32, 0, NAMEREF(min), 2)
COLON()
REFER(_P)
REFER(return)
ENDDEF()
IHEADEDDEF(_b_b, 2, 60,60,32,32,32, 0, NULLREF(), 3)
COLON()
REFER(compile)
REFER(dup)
REFER(return)
ENDDEF()
IHEADEDDEF(_c_d, 2, 61,62,32,32,32, 0, NAMEREF(_Rdup), 5)
COLON()
REFER(_Q_K)
REFER(if)
REFER(compile)
REFER(drop)
REFER(return)
ENDDEF()
IHEADEDDEF(_c_c_d, 3, 61,61,62,32,32, 0, NAMEREF(_Gsource), 4)
COLON()
REFER(compile)
REFER(_c)
REFER(_c_d)
REFER(return)
ENDDEF()
IHEADEDDEF(_d_d, 2, 62,62,32,32,32, 0, NULLREF(), 3)
COLON()
REFER(else)
REFER(swap)
REFER(return)
ENDDEF()
IHEADEDDEF(endsel, 6, 101,110,100,115,101, 0, NAMEREF(_c_d), 8)
COLON()
REFER(compile)
REFER(drop)
REFER(_P)
REFER(_Hdo_I)
REFER(then)
REFER(_Hloop_I)
BRANCH(endsel,4)
REFER(return)
ENDDEF()
HEADEDDEF(reset_Mstream, 12, 114,101,115,101,116, 0, NULLREF(), 6)
COLON()
REFER(_Csource)
REFER(_A)
REFER(_P)
REFER(_din)
REFER(_A)
REFER(return)
ENDDEF()
HEADEDDEF(source_Mid, 9, 115,111,117,114,99, 0, NULLREF(), 3)
COLON()
REFER(_Gsource_Mid)
REFER(_f)
REFER(return)
ENDDEF()
HEADLESSDEF(default_Msource,5)
COLON()
REFER(sourceptr)
REFER(_f)
REFER(_Csource)
REFER(_f)
REFER(return)
ENDDEF()
HEADEDDEF(source, 6, 115,111,117,114,99, 0, NULLREF(), 3)
COLON()
REFER(_Gsource)
REFER(perform)
REFER(return)
ENDDEF()
HEADEDDEF(parse, 5, 112,97,114,115,101, 0, NULLREF(), 4)
COLON()
REFER(_Gsource)
REFER(perform)
REFER(_kparse)
REFER(return)
ENDDEF()
HEADEDDEF(parse_Mword, 10, 112,97,114,115,101, 0, NAMEREF(dp_P), 4)
COLON()
REFER(_Gsource)
REFER(perform)
REFER(_kparse_Mword)
REFER(return)
ENDDEF()
HEADEDDEF(word, 4, 119,111,114,100,32, 0, NAMEREF(d_K_M), 4)
COLON()
REFER(_Gsource)
REFER(perform)
REFER(_kword)
REFER(return)
ENDDEF()
HEADEDDEF(count, 5, 99,111,117,110,116, 0, NULLREF(), 5)
COLON()
REFER(dup)
REFER(_Q_K)
REFER(swap)
REFER(c_f)
REFER(return)
ENDDEF()
HEADEDDEF(_Lword, 5, 44,119,111,114,100, 0, NULLREF(), 6)
COLON()
REFER(word)
REFER(count)
REFER(_Q_K)
REFER(allot)
REFER(drop)
REFER(return)
ENDDEF()
HEADEDDEF(string_L, 7, 115,116,114,105,110, 0, NULLREF(), 9)
COLON()
REFER(dup)
REFER(c_L)
REFER(here)
REFER(over)
REFER(allot)
REFER(align)
REFER(swap)
REFER(cmove)
REFER(return)
ENDDEF()
HEADLESSDEF(_Bs_Mbuffer,21)
CREATE()
SYMREFER(DEFAULTDOES)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
ENDDEF()
HEADEDDEF(_B, 1, 34,32,32,32,32, 0, NAMEREF(R0), 10)
COLON()
REFER(_Hliteral_I)
VALUE(0x22)
REFER(parse)
REFER(_dr)
REFER(_Bs_Mbuffer)
REFER(r_f)
REFER(cmove)
REFER(_Bs_Mbuffer)
REFER(r_d)
REFER(return)
ENDDEF()
HEADLESSDEF(_H_B_I,7)
COLON()
REFER(r_d)
REFER(count)
REFER(_Rdup)
REFER(_K)
REFER(aligned)
REFER(_dr)
REFER(return)
ENDDEF()
HEADLESSDEF(_H_N_B_I,8)
COLON()
REFER(r_d)
REFER(count)
REFER(_Rdup)
REFER(_K)
REFER(aligned)
REFER(_dr)
REFER(type)
REFER(return)
ENDDEF()
IHEADEDDEF(_B_B, 2, 34,34,32,32,32, 0, NAMEREF(sel), 7)
COLON()
REFER(_Hliteral_I)
VALUE(0x22)
REFER(parse)
REFER(compile)
REFER(_H_B_I)
REFER(string_L)
REFER(return)
ENDDEF()
IHEADEDDEF(_N_B, 2, 46,34,32,32,32, 0, NULLREF(), 7)
COLON()
REFER(_Hliteral_I)
VALUE(0x22)
REFER(parse)
REFER(compile)
REFER(_H_N_B_I)
REFER(string_L)
REFER(return)
ENDDEF()
IHEADEDDEF(s_B, 2, 115,34,32,32,32, 0, NULLREF(), 9)
COLON()
REFER(state)
REFER(_f)
REFER(_ebranch)
BRANCH(s_B,7)
REFER(_B_B)
REFER(branch)
BRANCH(s_B,8)
REFER(_B)
REFER(return)
ENDDEF()
IHEADEDDEF(_H, 1, 40,32,32,32,32, 0, NULLREF(), 5)
COLON()
REFER(_Hliteral_I)
VALUE(0x29)
REFER(parse)
REFER(_Rdrop)
REFER(return)
ENDDEF()
IHEADEDDEF(_N_H, 2, 46,40,32,32,32, 0, NULLREF(), 5)
COLON()
REFER(_Hliteral_I)
VALUE(0x29)
REFER(parse)
REFER(type)
REFER(return)
ENDDEF()
IHEADEDDEF(_h, 1, 92,32,32,32,32, 0, NAMEREF(_dmarks), 5)
COLON()
REFER(source)
REFER(_din)
REFER(_A)
REFER(drop)
REFER(return)
ENDDEF()
HEADEDDEF(get_Mcurrent, 11, 103,101,116,45,99, 0, NAMEREF(accept), 3)
COLON()
REFER(current)
REFER(_f)
REFER(return)
ENDDEF()
HEADEDDEF(set_Mcurrent, 11, 115,101,116,45,99, 0, NAMEREF(_d_d), 3)
COLON()
REFER(current)
REFER(_A)
REFER(return)
ENDDEF()
HEADEDDEF(definitions, 11, 100,101,102,105,110, 0, NULLREF(), 4)
COLON()
REFER(context)
REFER(_f)
REFER(set_Mcurrent)
REFER(return)
ENDDEF()
HEADEDDEF(get_Morder, 9, 103,101,116,45,111, 0, NULLREF(), 21)
COLON()
REFER(_Corder)
REFER(_f)
REFER(_edup)
REFER(_ebranch)
BRANCH(get_Morder,18)
REFER(_P)
REFER(_Hdo_I)
REFER(_Corder)
REFER(_f)
REFER(i)
REFER(_M)
REFER(_Q_M)
REFER(cells)
REFER(context)
REFER(_K)
REFER(_f)
REFER(_Hloop_I)
BRANCH(get_Morder,7)
REFER(_Corder)
REFER(_f)
REFER(return)
ENDDEF()
HEADEDDEF(set_Morder, 9, 115,101,116,45,111, 0, NAMEREF(s_B), 23)
COLON()
REFER(dup)
REFER(_P_b)
REFER(_ebranch)
BRANCH(set_Morder,7)
REFER(drop)
REFER(forth_Mwordlist)
REFER(_Q)
REFER(dup)
REFER(_Corder)
REFER(_A)
REFER(_edup)
REFER(_ebranch)
BRANCH(set_Morder,22)
REFER(_P)
REFER(_Hdo_I)
REFER(i)
REFER(cells)
REFER(context)
REFER(_K)
REFER(_A)
REFER(_Hloop_I)
BRANCH(set_Morder,15)
REFER(return)
ENDDEF()
HEADEDDEF(wordlist, 8, 119,111,114,100,108, 0, NAMEREF(_b_b), 7)
COLON()
REFER(vocabtag)
REFER(_f)
REFER(dup)
REFER(_Q_K)
REFER(vocabtag)
REFER(_A)
REFER(return)
ENDDEF()
HEADLESSDEF(hash,18)
COLON()
REFER(_P)
REFER(_Mrot)
REFER(over)
REFER(_K)
REFER(swap)
REFER(_Hdo_I)
REFER(i)
REFER(c_f)
REFER(_K)
REFER(_Hloop_I)
BRANCH(hash,6)
REFER(hashtablesize)
REFER(_Q_M)
REFER(and)
REFER(cells)
REFER(hashtable)
REFER(_K)
REFER(return)
ENDDEF()
HEADEDDEF(find, 4, 102,105,110,100,32, 0, NULLREF(), 32)
COLON()
REFER(count)
REFER(_Rdup)
REFER(hash)
REFER(_f)
REFER(loc_Mwordlist)
REFER(_Hfind_I)
REFER(_ebranch)
BRANCH(find,9)
REFER(return)
REFER(_Corder)
REFER(_f)
REFER(_edup)
REFER(_ebranch)
BRANCH(find,28)
REFER(_P)
REFER(_Hdo_I)
REFER(i)
REFER(cells)
REFER(context)
REFER(_K)
REFER(_f)
REFER(_Hfind_I)
REFER(_ebranch)
BRANCH(find,26)
REFER(unloop)
REFER(return)
REFER(_Hloop_I)
BRANCH(find,16)
REFER(_Rdrop)
REFER(_Q_M)
REFER(_P)
REFER(return)
ENDDEF()
HEADEDDEF(search_Mwordlist, 15, 115,101,97,114,99, 0, NAMEREF(parse), 13)
COLON()
REFER(_dr)
REFER(_Rdup)
REFER(hash)
REFER(_f)
REFER(r_d)
REFER(_Hfind_I)
REFER(not)
REFER(_ebranch)
BRANCH(search_Mwordlist,12)
REFER(drop)
REFER(_Rdrop)
REFER(_P)
REFER(return)
ENDDEF()
HEADEDDEF(_Hforget_I, 8, 40,102,111,114,103, 0, NAMEREF(dnegate), 29)
COLON()
REFER(hashtablesize)
REFER(_P)
REFER(_Hdo_I)
REFER(i)
REFER(cells)
REFER(hashtable)
REFER(_K)
REFER(_f)
REFER(dup)
REFER(_Rpick)
REFER(here)
REFER(within)
REFER(_ebranch)
BRANCH(_Hforget_I,19)
REFER(name_d)
REFER(_dlink)
REFER(_f)
REFER(branch)
BRANCH(_Hforget_I,8)
REFER(i)
REFER(cells)
REFER(hashtable)
REFER(_K)
REFER(_A)
REFER(_Hloop_I)
BRANCH(_Hforget_I,3)
REFER(dp)
REFER(_A)
REFER(return)
ENDDEF()
HEADLESSDEF(notunique_e,8)
COLON()
REFER(count)
REFER(get_Mcurrent)
REFER(search_Mwordlist)
REFER(dup)
REFER(_ebranch)
BRANCH(notunique_e,7)
REFER(nip)
REFER(return)
ENDDEF()
HEADEDDEF(header, 6, 104,101,97,100,101, 0, NAMEREF(read_Mfile), 35)
COLON()
REFER(align)
REFER(here)
REFER(namesize)
REFER(bl)
REFER(fill)
REFER(bl)
REFER(word)
REFER(notunique_e)
REFER(_ebranch)
BRANCH(header,19)
REFER(here)
REFER(count)
REFER(type)
REFER(_H_N_B_I)
VALUE(0xd206973)
VALUE(0x6e277420)
VALUE(0x756e6971)
VALUE(0x75650000)
REFER(cr)
REFER(here)
REFER(dup)
REFER(last)
REFER(_A)
REFER(dup)
REFER(count)
REFER(hash)
REFER(namesize)
REFER(allot)
REFER(get_Mcurrent)
REFER(w_L)
REFER(dup)
REFER(_f)
REFER(_L)
REFER(_A)
REFER(return)
ENDDEF()
HEADLESSDEF(setbits,7)
COLON()
REFER(_dr)
REFER(r_f)
REFER(c_f)
REFER(or)
REFER(r_d)
REFER(c_A)
REFER(return)
ENDDEF()
HEADLESSDEF(clearbits,8)
COLON()
REFER(_dr)
REFER(not)
REFER(r_f)
REFER(c_f)
REFER(and)
REFER(r_d)
REFER(c_A)
REFER(return)
ENDDEF()
HEADEDDEF(immediate, 9, 105,109,109,101,100, 0, NAMEREF(then), 5)
COLON()
REFER(_Hliteral_I)
VALUE(0x80)
REFER(latest)
REFER(setbits)
REFER(return)
ENDDEF()
HEADEDDEF(hide, 4, 104,105,100,101,32, 0, NAMEREF(dabs), 5)
COLON()
REFER(_Hliteral_I)
VALUE(0x40)
REFER(latest)
REFER(setbits)
REFER(return)
ENDDEF()
HEADEDDEF(reveal, 6, 114,101,118,101,97, 0, NAMEREF(open_Mfile), 5)
COLON()
REFER(_Hliteral_I)
VALUE(0x40)
REFER(latest)
REFER(clearbits)
REFER(return)
ENDDEF()
HEADEDDEF(variable, 8, 118,97,114,105,97, 0, NAMEREF(max), 6)
COLON()
REFER(header)
REFER(compileprim)
REFER(dovariable)
REFER(_P)
REFER(_L)
REFER(return)
ENDDEF()
HEADEDDEF(constant, 8, 99,111,110,115,116, 0, NAMEREF(j), 5)
COLON()
REFER(header)
REFER(compileprim)
REFER(doconstant)
REFER(_L)
REFER(return)
ENDDEF()
HEADEDDEF(offset_Z, 7, 111,102,102,115,101, 0, NULLREF(), 5)
COLON()
REFER(header)
REFER(compileprim)
REFER(dooffset)
REFER(_L)
REFER(return)
ENDDEF()
HEADEDDEF(_Rvariable, 9, 50,118,97,114,105, 0, NAMEREF(wordlist), 4)
COLON()
REFER(variable)
REFER(_P)
REFER(_L)
REFER(return)
ENDDEF()
HEADLESSDEF(does,7)
COLON()
REFER(r_d)
REFER(latest)
REFER(name_d)
REFER(codefieldsize)
REFER(_K)
REFER(_A)
REFER(return)
ENDDEF()
HEADEDDEF(create, 6, 99,114,101,97,116, 0, NAMEREF(negate), 6)
COLON()
REFER(header)
REFER(compileprim)
REFER(docreate)
REFER(defaultdoes)
REFER(_L)
REFER(return)
ENDDEF()
HEADEDDEF(region, 6, 114,101,103,105,111, 0, NAMEREF(c_A), 6)
COLON()
REFER(create)
REFER(here)
REFER(cell_K)
REFER(_L)
REFER(allot)
REFER(return)
ENDDEF()
HEADEDDEF(locregion, 9, 108,111,99,114,101, 0, NAMEREF(type), 129)
VARIABLE()
BRANCH(locregion,1)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
ENDDEF()
HEADEDDEF(to_e, 3, 116,111,63,32,32, 0, NAMEREF(_B), 1)
VARIABLE()
VALUE(0x0)
ENDDEF()
IHEADEDDEF(to, 2, 116,111,32,32,32, 0, NAMEREF(close_Mfile), 4)
COLON()
REFER(_Q)
REFER(to_e)
REFER(_A)
REFER(return)
ENDDEF()
HEADLESSDEF(make_Mlocal,47)
COLON()
REFER(_M_Q)
REFER(push_Mstream)
REFER(locregion)
REFER(allocatefrom)
REFER(get_Mcurrent)
REFER(loc_Mwordlist)
REFER(set_Mcurrent)
REFER(create)
REFER(immediate)
REFER(_Clocals)
REFER(_f)
REFER(dup)
REFER(_L)
REFER(_Q_K)
REFER(_Clocals)
REFER(_A)
REFER(set_Mcurrent)
REFER(stdregion)
REFER(allocatefrom)
REFER(pop_Mstream)
REFER(does)
REFER(to_e)
REFER(_f)
REFER(_ebranch)
BRANCH(make_Mlocal,32)
REFER(compile)
REFER(_Hrstore_I)
REFER(_P)
REFER(to_e)
REFER(_A)
REFER(branch)
BRANCH(make_Mlocal,34)
REFER(compile)
REFER(_Hrfetch_I)
REFER(_Clocals)
REFER(_f)
REFER(swap)
REFER(_f)
REFER(_M)
REFER(_Q_M)
REFER(_Cloops)
REFER(_f)
REFER(_R_J)
REFER(_K)
REFER(cells)
REFER(_L)
REFER(return)
ENDDEF()
HEADEDDEF(_Hlocal_I, 7, 40,108,111,99,97, 0, NAMEREF(_h), 22)
COLON()
REFER(_edup)
REFER(_ebranch)
BRANCH(_Hlocal_I,12)
REFER(last)
REFER(_f)
REFER(_dr)
REFER(make_Mlocal)
REFER(r_d)
REFER(last)
REFER(_A)
REFER(branch)
BRANCH(_Hlocal_I,21)
REFER(drop)
REFER(_Clocals)
REFER(_f)
REFER(_edup)
REFER(_ebranch)
BRANCH(_Hlocal_I,21)
REFER(compile)
REFER(_Hinitlocals_I)
REFER(_L)
REFER(return)
ENDDEF()
HEADLESSDEF(free_Mlocals,11)
COLON()
REFER(_Clocals)
REFER(_f)
REFER(_ebranch)
BRANCH(free_Mlocals,10)
REFER(compile)
REFER(_Hrpop_I)
REFER(_Clocals)
REFER(_f)
REFER(cells)
REFER(_L)
REFER(return)
ENDDEF()
HEADLESSDEF(end_Mscope,16)
COLON()
REFER(_Clocals)
REFER(_f)
REFER(_ebranch)
BRANCH(end_Mscope,15)
REFER(locregion)
REFER(allocatefrom)
REFER(locregion)
REFER(cell_K)
REFER(_Hforget_I)
REFER(stdregion)
REFER(allocatefrom)
REFER(free_Mlocals)
REFER(_P)
REFER(_Clocals)
REFER(_A)
REFER(return)
ENDDEF()
IHEADEDDEF(does_d, 5, 100,111,101,115,62, 0, NAMEREF(_dmark), 4)
COLON()
REFER(end_Mscope)
REFER(compile)
REFER(does)
REFER(return)
ENDDEF()
HEADEDDEF(_Znoname, 7, 58,110,111,110,97, 0, NAMEREF(_c_c_d), 8)
COLON()
REFER(here)
REFER(compileprim)
REFER(docolon)
REFER(dup)
REFER(last_Mcolon)
REFER(_A)
REFER(_i)
REFER(return)
ENDDEF()
HEADEDDEF(_Z, 1, 58,32,32,32,32, 0, NULLREF(), 5)
COLON()
REFER(header)
REFER(_Znoname)
REFER(drop)
REFER(hide)
REFER(return)
ENDDEF()
IHEADEDDEF(recurse, 7, 114,101,99,117,114, 0, NAMEREF(allocatefrom), 4)
COLON()
REFER(last_Mcolon)
REFER(_f)
REFER(_L)
REFER(return)
ENDDEF()
IHEADEDDEF(R3, 4, 101,120,105,116,32, 0, NAMEREF(loop), 4)
COLON()
REFER(free_Mlocals)
REFER(compile)
REFER(return)
REFER(return)
ENDDEF()
IHEADEDDEF(_a, 1, 59,32,32,32,32, 0, NULLREF(), 6)
COLON()
REFER(end_Mscope)
REFER(compile)
REFER(return)
REFER(reveal)
REFER(_g)
REFER(return)
ENDDEF()
HEADEDDEF(foreign_Z, 8, 102,111,114,101,105, 0, NULLREF(), 7)
COLON()
REFER(header)
REFER(compileprim)
REFER(doforeign)
REFER(_L)
REFER(_L)
REFER(_L)
REFER(return)
ENDDEF()
HEADLESSDEF(hld,1)
VARIABLE()
VALUE(0x0)
ENDDEF()
HEADEDDEF(space, 5, 115,112,97,99,101, 0, NAMEREF(um_J), 3)
COLON()
REFER(bl)
REFER(emit)
REFER(return)
ENDDEF()
HEADEDDEF(spaces, 6, 115,112,97,99,101, 0, NAMEREF(reveal), 11)
COLON()
REFER(_P)
REFER(max)
REFER(_edup)
REFER(_ebranch)
BRANCH(spaces,10)
REFER(_P)
REFER(_Hdo_I)
REFER(space)
REFER(_Hloop_I)
BRANCH(spaces,7)
REFER(return)
ENDDEF()
HEADEDDEF(hold, 4, 104,111,108,100,32, 0, NAMEREF(fill), 7)
COLON()
REFER(_M_Q)
REFER(hld)
REFER(_K_A)
REFER(hld)
REFER(_f)
REFER(c_A)
REFER(return)
ENDDEF()
HEADEDDEF(_b_C, 2, 60,35,32,32,32, 0, NAMEREF(resize_Mfile), 4)
COLON()
REFER(pad)
REFER(hld)
REFER(_A)
REFER(return)
ENDDEF()
HEADEDDEF(_C_d, 2, 35,62,32,32,32, 0, NAMEREF(_T_M), 7)
COLON()
REFER(_Rdrop)
REFER(hld)
REFER(_f)
REFER(pad)
REFER(over)
REFER(_M)
REFER(return)
ENDDEF()
HEADEDDEF(sign, 4, 115,105,103,110,32, 0, NAMEREF(_dresolves), 7)
COLON()
REFER(_P_b)
REFER(_ebranch)
BRANCH(sign,6)
REFER(_Hliteral_I)
VALUE(0x2d)
REFER(hold)
REFER(return)
ENDDEF()
HEADEDDEF(_C, 1, 35,32,32,32,32, 0, NAMEREF(_fsp), 18)
COLON()
REFER(base)
REFER(_f)
REFER(m_Ommod)
REFER(rot)
REFER(_Hliteral_I)
VALUE(0x9)
REFER(over)
REFER(_b)
REFER(_ebranch)
BRANCH(_C,13)
REFER(_Hliteral_I)
VALUE(0x27)
REFER(_K)
REFER(_Hliteral_I)
VALUE(0x30)
REFER(_K)
REFER(hold)
REFER(return)
ENDDEF()
HEADEDDEF(_Cs, 2, 35,115,32,32,32, 0, NULLREF(), 7)
COLON()
REFER(_C)
REFER(_Rdup)
REFER(or)
REFER(_P_c)
REFER(_ebranch)
BRANCH(_Cs,0)
REFER(return)
ENDDEF()
HEADEDDEF(d_Nr, 3, 100,46,114,32,32, 0, NAMEREF(parse_Mword), 15)
COLON()
REFER(_dr)
REFER(swap)
REFER(over)
REFER(dabs)
REFER(_b_C)
REFER(_Cs)
REFER(rot)
REFER(sign)
REFER(_C_d)
REFER(r_d)
REFER(over)
REFER(_M)
REFER(spaces)
REFER(type)
REFER(return)
ENDDEF()
HEADEDDEF(zeroes, 6, 122,101,114,111,101, 0, NAMEREF(w_A), 13)
COLON()
REFER(_P)
REFER(max)
REFER(_edup)
REFER(_ebranch)
BRANCH(zeroes,12)
REFER(_P)
REFER(_Hdo_I)
REFER(_Hliteral_I)
VALUE(0x30)
REFER(emit)
REFER(_Hloop_I)
BRANCH(zeroes,7)
REFER(return)
ENDDEF()
HEADEDDEF(d_Nlz, 4, 100,46,108,122,32, 0, NAMEREF(_Rvariable), 15)
COLON()
REFER(_dr)
REFER(swap)
REFER(over)
REFER(dabs)
REFER(_b_C)
REFER(_Cs)
REFER(rot)
REFER(sign)
REFER(_C_d)
REFER(r_d)
REFER(over)
REFER(_M)
REFER(zeroes)
REFER(type)
REFER(return)
ENDDEF()
HEADEDDEF(d_N, 2, 100,46,32,32,32, 0, NAMEREF(resize), 4)
COLON()
REFER(_P)
REFER(d_Nr)
REFER(space)
REFER(return)
ENDDEF()
HEADEDDEF(_Nr, 2, 46,114,32,32,32, 0, NAMEREF(d_b), 5)
COLON()
REFER(_dr)
REFER(s_dd)
REFER(r_d)
REFER(d_Nr)
REFER(return)
ENDDEF()
HEADEDDEF(_N, 1, 46,32,32,32,32, 0, NULLREF(), 3)
COLON()
REFER(s_dd)
REFER(d_N)
REFER(return)
ENDDEF()
HEADEDDEF(u_Nr, 3, 117,46,114,32,32, 0, NAMEREF(compile_L), 4)
COLON()
REFER(_P)
REFER(swap)
REFER(d_Nr)
REFER(return)
ENDDEF()
HEADEDDEF(u_Nlz, 4, 117,46,108,122,32, 0, NAMEREF(get_Morder), 4)
COLON()
REFER(_P)
REFER(swap)
REFER(d_Nlz)
REFER(return)
ENDDEF()
HEADEDDEF(u_N, 2, 117,46,32,32,32, 0, NAMEREF(w_L), 3)
COLON()
REFER(_P)
REFER(d_N)
REFER(return)
ENDDEF()
HEADEDDEF(_e, 1, 63,32,32,32,32, 0, NAMEREF(_Corder), 3)
COLON()
REFER(_f)
REFER(_N)
REFER(return)
ENDDEF()
HEADEDDEF(u_e, 2, 117,63,32,32,32, 0, NAMEREF(last), 3)
COLON()
REFER(_f)
REFER(u_N)
REFER(return)
ENDDEF()
IHEADEDDEF(postpone, 8, 112,111,115,116,112, 0, NAMEREF(d_Nlz), 10)
COLON()
REFER(bl)
REFER(word)
REFER(find)
REFER(_P_b)
REFER(_ebranch)
BRANCH(postpone,8)
REFER(compile)
REFER(compile)
REFER(_L)
REFER(return)
ENDDEF()
HEADEDDEF(_G, 1, 39,32,32,32,32, 0, NAMEREF(rdrop), 9)
COLON()
REFER(bl)
REFER(word)
REFER(find)
REFER(_P_c)
REFER(_ebranch)
BRANCH(_G,8)
REFER(drop)
REFER(_P)
REFER(return)
ENDDEF()
IHEADEDDEF(_gcompile_i, 9, 91,99,111,109,112, 0, NAMEREF(find), 3)
COLON()
REFER(_G)
REFER(_L)
REFER(return)
ENDDEF()
IHEADEDDEF(_g_G_i, 3, 91,39,93,32,32, 0, NAMEREF(name_d), 5)
COLON()
REFER(_G)
REFER(compile)
REFER(_Hliteral_I)
REFER(_L)
REFER(return)
ENDDEF()
IHEADEDDEF(literal, 7, 108,105,116,101,114, 0, NAMEREF(_Rswap), 4)
COLON()
REFER(compile)
REFER(_Hliteral_I)
REFER(_L)
REFER(return)
ENDDEF()
HEADEDDEF(char, 4, 99,104,97,114,32, 0, NULLREF(), 5)
COLON()
REFER(bl)
REFER(word)
REFER(_Q_K)
REFER(c_f)
REFER(return)
ENDDEF()
IHEADEDDEF(_gchar_i, 6, 91,99,104,97,114, 0, NAMEREF(_N_H), 3)
COLON()
REFER(char)
REFER(literal)
REFER(return)
ENDDEF()
HEADEDDEF(forget, 6, 102,111,114,103,101, 0, NULLREF(), 18)
COLON()
REFER(bl)
REFER(word)
REFER(count)
REFER(get_Mcurrent)
REFER(search_Mwordlist)
REFER(_ebranch)
BRANCH(forget,11)
REFER(_dname)
REFER(_Hforget_I)
REFER(branch)
BRANCH(forget,17)
REFER(here)
REFER(count)
REFER(type)
REFER(_H_N_B_I)
VALUE(0x2203f00)
REFER(cr)
REFER(return)
ENDDEF()
HEADEDDEF(dump, 4, 100,117,109,112,32, 0, NAMEREF(get_Menv), 73)
COLON()
REFER(cr)
REFER(_M_Q)
REFER(_P)
REFER(_b_C)
REFER(_Cs)
REFER(_C_d)
REFER(nip)
REFER(_Mrot)
REFER(_Hliteral_I)
VALUE(0xff)
REFER(_P)
REFER(_b_C)
REFER(_Cs)
REFER(_C_d)
REFER(nip)
REFER(_Mrot)
REFER(over)
REFER(_K)
REFER(swap)
REFER(_Hdo_I)
REFER(i)
REFER(_R)
REFER(pick)
REFER(u_Nlz)
REFER(_H_N_B_I)
VALUE(0x13a0000)
REFER(space)
REFER(i)
REFER(_Hliteral_I)
VALUE(0x8)
REFER(_K)
REFER(i)
REFER(_Hdo_I)
REFER(i)
REFER(c_f)
REFER(over)
REFER(u_Nlz)
REFER(space)
REFER(_Hloop_I)
BRANCH(dump,33)
REFER(_T)
REFER(spaces)
REFER(i)
REFER(_Hliteral_I)
VALUE(0x8)
REFER(_K)
REFER(i)
REFER(_Hdo_I)
REFER(i)
REFER(c_f)
REFER(dup)
REFER(bl)
REFER(_b)
REFER(over)
REFER(_Hliteral_I)
VALUE(0x7e)
REFER(_d)
REFER(or)
REFER(_ebranch)
BRANCH(dump,63)
REFER(drop)
REFER(_Hliteral_I)
VALUE(0x2e)
REFER(emit)
REFER(_Hloop_I)
BRANCH(dump,48)
REFER(cr)
REFER(_Hliteral_I)
VALUE(0x8)
REFER(_H_Kloop_I)
BRANCH(dump,20)
REFER(_Rdrop)
REFER(return)
ENDDEF()
HEADEDDEF(_Ns, 2, 46,115,32,32,32, 0, NAMEREF(_gcompile_i), 13)
COLON()
REFER(_fsp)
REFER(sp_P)
REFER(_Rdup)
REFER(u_b)
REFER(_ebranch)
BRANCH(_Ns,11)
REFER(cell_M)
REFER(dup)
REFER(_e)
REFER(branch)
BRANCH(_Ns,2)
REFER(_Rdrop)
REFER(return)
ENDDEF()
HEADEDDEF(digit, 5, 100,105,103,105,116, 0, NAMEREF(chars), 48)
COLON()
REFER(dup)
REFER(_Hliteral_I)
VALUE(0x60)
REFER(u_d)
REFER(_ebranch)
BRANCH(digit,8)
REFER(bl)
REFER(_M)
REFER(_Hliteral_I)
VALUE(0x30)
REFER(_M)
REFER(dup)
REFER(_Hliteral_I)
VALUE(0x9)
REFER(_d)
REFER(over)
REFER(_Hliteral_I)
VALUE(0x11)
REFER(_b)
REFER(and)
REFER(_ebranch)
BRANCH(digit,26)
REFER(drop)
REFER(false)
REFER(branch)
BRANCH(digit,47)
REFER(dup)
REFER(_Hliteral_I)
VALUE(0x9)
REFER(u_d)
REFER(_ebranch)
BRANCH(digit,35)
REFER(_Hliteral_I)
VALUE(0x7)
REFER(_M)
REFER(dup)
REFER(base)
REFER(_f)
REFER(_Q_M)
REFER(u_d)
REFER(_ebranch)
BRANCH(digit,46)
REFER(drop)
REFER(false)
REFER(branch)
BRANCH(digit,47)
REFER(true)
REFER(return)
ENDDEF()
HEADEDDEF(convert, 7, 99,111,110,118,101, 0, NULLREF(), 20)
COLON()
REFER(_dr)
REFER(r_d)
REFER(_Q_K)
REFER(dup)
REFER(_dr)
REFER(c_f)
REFER(digit)
REFER(_ebranch)
BRANCH(convert,18)
REFER(_dr)
REFER(base)
REFER(_f)
REFER(um_Jm)
REFER(r_d)
REFER(_P)
REFER(d_K)
REFER(branch)
BRANCH(convert,1)
REFER(r_d)
REFER(return)
ENDDEF()
HEADEDDEF(_dnumber, 7, 62,110,117,109,98, 0, NULLREF(), 26)
COLON()
REFER(dup)
REFER(_dr)
REFER(_ebranch)
BRANCH(_dnumber,24)
REFER(dup)
REFER(_dr)
REFER(c_f)
REFER(digit)
REFER(_ebranch)
BRANCH(_dnumber,23)
REFER(_dr)
REFER(base)
REFER(_f)
REFER(um_Jm)
REFER(r_d)
REFER(_P)
REFER(d_K)
REFER(r_d)
REFER(_Q_K)
REFER(r_d)
REFER(_Q_M)
REFER(branch)
BRANCH(_dnumber,0)
REFER(r_d)
REFER(r_d)
REFER(return)
ENDDEF()
HEADEDDEF(number, 6, 110,117,109,98,101, 0, NAMEREF(u_Nlz), 29)
COLON()
REFER(dup)
REFER(_Q_K)
REFER(c_f)
REFER(_Hliteral_I)
VALUE(0x2d)
REFER(_c)
REFER(dup)
REFER(_dr)
REFER(_M)
REFER(_P)
REFER(_P)
REFER(rot)
REFER(convert)
REFER(c_f)
REFER(bl)
REFER(_c)
REFER(_ebranch)
BRANCH(number,24)
REFER(drop)
REFER(r_d)
REFER(_K_M)
REFER(true)
REFER(branch)
BRANCH(number,28)
REFER(_Rdrop)
REFER(r_d)
REFER(drop)
REFER(false)
REFER(return)
ENDDEF()
HEADEDDEF(_estack, 6, 63,115,116,97,99, 0, NAMEREF(rot), 4)
COLON()
REFER(_fsp)
REFER(sp_P)
REFER(_d)
REFER(return)
ENDDEF()
HEADLESSDEF(endinterp,7)
COLON()
REFER(state)
REFER(_f)
REFER(_P_c)
REFER(_ebranch)
BRANCH(endinterp,6)
REFER(_h)
REFER(return)
ENDDEF()
HEADEDDEF(interpret, 9, 105,110,116,101,114, 0, NULLREF(), 52)
COLON()
REFER(bl)
REFER(word)
REFER(c_f)
REFER(_ebranch)
BRANCH(interpret,51)
REFER(here)
REFER(find)
REFER(_edup)
REFER(_ebranch)
BRANCH(interpret,21)
REFER(state)
REFER(_f)
REFER(_K)
REFER(_ebranch)
BRANCH(interpret,18)
REFER(execute)
REFER(branch)
BRANCH(interpret,19)
REFER(_L)
REFER(branch)
BRANCH(interpret,38)
REFER(number)
REFER(_ebranch)
BRANCH(interpret,31)
REFER(state)
REFER(_f)
REFER(_ebranch)
BRANCH(interpret,29)
REFER(literal)
REFER(branch)
BRANCH(interpret,38)
REFER(here)
REFER(count)
REFER(type)
REFER(_H_N_B_I)
VALUE(0x2203f00)
REFER(cr)
REFER(endinterp)
REFER(_estack)
REFER(_ebranch)
BRANCH(interpret,49)
REFER(_H_N_B_I)
VALUE(0xc207374)
VALUE(0x61636b20)
VALUE(0x656d7074)
VALUE(0x79000000)
REFER(cr)
REFER(pspreset)
REFER(endinterp)
REFER(branch)
BRANCH(interpret,0)
REFER(return)
ENDDEF()
HEADEDDEF(evaluate, 8, 101,118,97,108,117, 0, NULLREF(), 5)
COLON()
REFER(_M_Q)
REFER(push_Mstream)
REFER(interpret)
REFER(pop_Mstream)
REFER(return)
ENDDEF()
IHEADEDDEF(h_C, 2, 104,35,32,32,32, 0, NAMEREF(source_Mid), 11)
COLON()
REFER(base)
REFER(_f)
REFER(_dr)
REFER(bl)
REFER(parse_Mword)
REFER(hex)
REFER(evaluate)
REFER(r_d)
REFER(base)
REFER(_A)
REFER(return)
ENDDEF()
IHEADEDDEF(d_C, 2, 100,35,32,32,32, 0, NAMEREF(forget), 11)
COLON()
REFER(base)
REFER(_f)
REFER(_dr)
REFER(bl)
REFER(parse_Mword)
REFER(decimal)
REFER(evaluate)
REFER(r_d)
REFER(base)
REFER(_A)
REFER(return)
ENDDEF()
HEADEDDEF(quit, 4, 113,117,105,116,32, 0, NAMEREF(string_L), 36)
COLON()
REFER(spreset)
REFER(_g)
REFER(kib)
REFER(_P)
REFER(_P)
REFER(push_Mstream)
REFER(state)
REFER(_f)
REFER(_P_c)
REFER(_ebranch)
BRANCH(quit,17)
REFER(cr)
REFER(_H_N_B_I)
VALUE(0x46f6b3e)
VALUE(0x20000000)
REFER(branch)
BRANCH(quit,19)
REFER(_H_N_B_I)
VALUE(0x25d2000)
REFER(kib)
REFER(_Hliteral_I)
VALUE(0x80)
REFER(accept)
REFER(dup)
REFER(_P_b)
REFER(not)
REFER(_ebranch)
BRANCH(quit,32)
REFER(reset_Mstream)
REFER(interpret)
REFER(branch)
BRANCH(quit,6)
REFER(drop)
REFER(pop_Mstream)
REFER(cr)
REFER(return)
ENDDEF()
HEADEDDEF(abort, 5, 97,98,111,114,116, 0, NAMEREF(r_Ow), 3)
COLON()
REFER(pspreset)
REFER(quit)
REFER(return)
ENDDEF()
IHEADEDDEF(abort_B, 6, 97,98,111,114,116, 0, NAMEREF(_Z), 6)
COLON()
REFER(if)
REFER(_N_B)
REFER(compile)
REFER(abort)
REFER(then)
REFER(return)
ENDDEF()
HEADLESSDEF(coldstart,13)
COLON()
REFER(dp_P)
REFER(stdregion)
REFER(_A)
REFER(_Hliteral_I)
VALUE(0x2)
REFER(vocabtag)
REFER(_A)
REFER(_Hliteral_I)
REFER(abort_B)
REFER(_dname)
REFER(last)
REFER(_A)
REFER(return)
ENDDEF()
HEADLESSDEF(warmstart,15)
COLON()
REFER(stdregion)
REFER(allocatefrom)
REFER(_Hliteral_I)
REFER(default_Msource)
REFER(_Gsource)
REFER(_A)
REFER(_M_Q)
REFER(set_Morder)
REFER(definitions)
REFER(hex)
REFER(_P)
REFER(leavings)
REFER(_A)
REFER(ioinit)
REFER(return)
ENDDEF()
HEADEDDEF(_eerror, 6, 63,101,114,114,111, 0, NAMEREF(header), 6)
COLON()
REFER(_ebranch)
BRANCH(_eerror,5)
REFER(perror)
REFER(_Q)
REFER(terminate)
REFER(return)
ENDDEF()
HEADLESSDEF(line_Mbuffer_Mfreelist,1)
VARIABLE()
VALUE(0x0)
ENDDEF()
HEADEDDEF(get_Mline_Mbuffer, 15, 103,101,116,45,108, 0, NAMEREF(word), 17)
COLON()
REFER(line_Mbuffer_Mfreelist)
REFER(_f)
REFER(dup)
REFER(_ebranch)
BRANCH(get_Mline_Mbuffer,11)
REFER(dup)
REFER(_f)
REFER(line_Mbuffer_Mfreelist)
REFER(_A)
REFER(branch)
BRANCH(get_Mline_Mbuffer,16)
REFER(drop)
REFER(_Hliteral_I)
VALUE(0x80)
REFER(allocate)
REFER(_eerror)
REFER(return)
ENDDEF()
HEADEDDEF(free_Mline_Mbuffer, 16, 102,114,101,101,45, 0, NULLREF(), 7)
COLON()
REFER(line_Mbuffer_Mfreelist)
REFER(_f)
REFER(over)
REFER(_A)
REFER(line_Mbuffer_Mfreelist)
REFER(_A)
REFER(return)
ENDDEF()
HEADEDDEF(open_Merror, 10, 111,112,101,110,45, 0, NULLREF(), 17)
COLON()
REFER(_H_N_B_I)
VALUE(0x12666f72)
VALUE(0x74683a20)
VALUE(0x63616e27)
VALUE(0x74206f70)
VALUE(0x656e2000)
REFER(_Hliteral_I)
VALUE(0x22)
REFER(emit)
REFER(type)
REFER(_Hliteral_I)
VALUE(0x22)
REFER(emit)
REFER(cr)
REFER(_Q)
REFER(terminate)
REFER(return)
ENDDEF()
HEADEDDEF(include_Mfile, 12, 105,110,99,108,117, 0, NAMEREF(sign), 27)
COLON()
REFER(_dr)
REFER(get_Mline_Mbuffer)
REFER(dup)
REFER(_P)
REFER(r_d)
REFER(push_Mstream)
REFER(_dr)
REFER(r_f)
REFER(_Hliteral_I)
VALUE(0x80)
REFER(source_Mid)
REFER(read_Mline)
REFER(_eerror)
REFER(_ebranch)
BRANCH(include_Mfile,19)
REFER(reset_Mstream)
REFER(interpret)
REFER(branch)
BRANCH(include_Mfile,7)
REFER(drop)
REFER(source_Mid)
REFER(close_Mfile)
REFER(_eerror)
REFER(r_d)
REFER(free_Mline_Mbuffer)
REFER(pop_Mstream)
REFER(return)
ENDDEF()
HEADEDDEF(open_Minclude, 12, 111,112,101,110,45, 0, NAMEREF(quit), 10)
COLON()
REFER(_Rdup)
REFER(r_Oo)
REFER(open_Mfile)
REFER(_ebranch)
BRANCH(open_Minclude,7)
REFER(drop)
REFER(open_Merror)
REFER(nip)
REFER(nip)
REFER(return)
ENDDEF()
HEADEDDEF(included, 8, 105,110,99,108,117, 0, NULLREF(), 3)
COLON()
REFER(open_Minclude)
REFER(include_Mfile)
REFER(return)
ENDDEF()
HEADEDDEF(fload, 5, 102,108,111,97,100, 0, NULLREF(), 2)
COLON()
REFER(included)
REFER(return)
ENDDEF()
HEADEDDEF(open_Mup, 7, 111,112,101,110,45, 0, NULLREF(), 71)
COLON()
REFER(_H_B_I)
VALUE(0x432e2e2f)
VALUE(0x2e2e2f2e)
VALUE(0x2e2f2e2e)
VALUE(0x2f2e2e2f)
VALUE(0x2e2e2f2e)
VALUE(0x2e2f2e2e)
VALUE(0x2f2e2e2f)
VALUE(0x2e2e2f58)
VALUE(0x58585858)
VALUE(0x58585858)
VALUE(0x58585858)
VALUE(0x58585858)
VALUE(0x58585858)
VALUE(0x58585858)
VALUE(0x58585858)
VALUE(0x58585858)
VALUE(0x58585858)
REFER(_Hliteral_I)
VALUE(0x1e)
REFER(_Ostring)
REFER(drop)
REFER(swap)
REFER(_Rdup)
REFER(_R_dr)
REFER(cmove)
REFER(_Rr_d)
REFER(_H_B_I)
VALUE(0x222e2e2f)
VALUE(0x2e2e2f2e)
VALUE(0x2e2f2e2e)
VALUE(0x2f2e2e2f)
VALUE(0x2e2e2f2e)
VALUE(0x2e2f2e2e)
VALUE(0x2f2e2e2f)
VALUE(0x2e2e2f52)
VALUE(0x4f4f5400)
REFER(_Hliteral_I)
VALUE(0x1e)
REFER(_Ostring)
REFER(_Rover)
REFER(r_Oo)
REFER(open_Mfile)
REFER(_ebranch)
BRANCH(open_Mup,66)
REFER(drop)
REFER(_Rdup)
REFER(r_Oo)
REFER(open_Mfile)
REFER(_ebranch)
BRANCH(open_Mup,62)
REFER(drop)
REFER(_R_dr)
REFER(_Hliteral_I)
VALUE(0xfffffffd)
REFER(_Ostring)
REFER(_Rr_d)
REFER(_Hliteral_I)
VALUE(0xfffffffd)
REFER(_Ostring)
REFER(branch)
BRANCH(open_Mup,40)
REFER(close_Mfile)
REFER(_eerror)
REFER(_Rdrop)
REFER(open_Merror)
REFER(_dr)
REFER(_Rdrop)
REFER(_Rdrop)
REFER(r_d)
REFER(return)
ENDDEF()
HEADEDDEF(sload, 5, 115,108,111,97,100, 0, NAMEREF(octal), 3)
COLON()
REFER(open_Mup)
REFER(include_Mfile)
REFER(return)
ENDDEF()
HEADEDDEF(strsave, 7, 115,116,114,115,97, 0, NAMEREF(pop_Mstream), 6)
COLON()
REFER(swap)
REFER(_Rdup)
REFER(_R_dr)
REFER(cmove)
REFER(_Rr_d)
REFER(return)
ENDDEF()
HEADEDDEF(strcat, 6, 115,116,114,99,97, 0, NAMEREF(source), 11)
COLON()
REFER(_dr)
REFER(_dr)
REFER(_Rdup)
REFER(_K)
REFER(r_d)
REFER(swap)
REFER(r_f)
REFER(cmove)
REFER(r_d)
REFER(_K)
REFER(return)
ENDDEF()
HEADLESSDEF(file_Mname_Mbuffer,65)
CREATE()
SYMREFER(DEFAULTDOES)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
VALUE(0x0)
ENDDEF()
HEADEDDEF(open_Mpath, 9, 111,112,101,110,45, 0, NULLREF(), 31)
COLON()
REFER(_Rswap)
REFER(_R_dr)
REFER(get_Menv)
REFER(dup)
REFER(_ebranch)
BRANCH(open_Mpath,28)
REFER(bl)
REFER(split)
REFER(file_Mname_Mbuffer)
REFER(strsave)
REFER(_H_B_I)
VALUE(0x12f0000)
REFER(strcat)
REFER(_Rr_f)
REFER(strcat)
REFER(r_Oo)
REFER(open_Mfile)
REFER(_ebranch)
BRANCH(open_Mpath,22)
REFER(drop)
REFER(branch)
BRANCH(open_Mpath,3)
REFER(nip)
REFER(nip)
REFER(rdrop)
REFER(rdrop)
REFER(branch)
BRANCH(open_Mpath,30)
REFER(_Rr_d)
REFER(open_Merror)
REFER(return)
ENDDEF()
HEADEDDEF(used, 4, 117,115,101,100,32, 0, NAMEREF(include_Mfile), 6)
COLON()
REFER(_H_B_I)
VALUE(0x5465041)
VALUE(0x54480000)
REFER(open_Mpath)
REFER(include_Mfile)
REFER(return)
ENDDEF()
HEADEDDEF(_C_A_Ousr_Olocal_Obin_Oforth, 22, 35,33,47,117,115, 0, NAMEREF(offset_Z), 2)
COLON()
REFER(_h)
REFER(return)
ENDDEF()
HEADEDDEF(bye, 3, 98,121,101,32,32, 0, NAMEREF(mod), 3)
COLON()
REFER(_P)
REFER(terminate)
REFER(return)
ENDDEF()
HEADLESSDEF(strlen,15)
COLON()
REFER(_P)
REFER(_dr)
REFER(dup)
REFER(c_f)
REFER(_ebranch)
BRANCH(strlen,12)
REFER(r_d)
REFER(_Q_K)
REFER(_dr)
REFER(_Q_K)
REFER(branch)
BRANCH(strlen,2)
REFER(drop)
REFER(r_d)
REFER(return)
ENDDEF()
HEADLESSDEF(initforth,3)
COLON()
REFER(coldstart)
REFER(warmstart)
REFER(return)
ENDDEF()
HEADLESSDEF(evalforth,4)
COLON()
REFER(dup)
REFER(strlen)
REFER(evaluate)
REFER(return)
ENDDEF()
HEADLESSDEF(doforth,46)
COLON()
REFER(cell_K)
REFER(swap)
REFER(_Q_M)
REFER(dup)
REFER(_ebranch)
BRANCH(doforth,22)
REFER(_P)
REFER(_Hdo_I)
REFER(dup)
REFER(_dr)
REFER(_f)
REFER(dup)
REFER(strlen)
REFER(open_Minclude)
REFER(include_Mfile)
REFER(r_d)
REFER(cell_K)
REFER(_Hloop_I)
BRANCH(doforth,8)
REFER(drop)
REFER(branch)
BRANCH(doforth,45)
REFER(_Rdrop)
REFER(cr)
REFER(_H_N_B_I)
VALUE(0x194a4820)
VALUE(0x666f7274)
VALUE(0x682c2076)
VALUE(0x65727369)
VALUE(0x6f6e2041)
VALUE(0x4e532031)
VALUE(0x2e320000)
REFER(cr)
REFER(_H_N_B_I)
VALUE(0x20286329)
VALUE(0x20313939)
VALUE(0x34204a48)
VALUE(0x552f4170)
VALUE(0x706c6965)
VALUE(0x64205068)
VALUE(0x79736963)
VALUE(0x73204c61)
VALUE(0x62000000)
REFER(pspreset)
REFER(quit)
REFER(return)
ENDDEF()
TABLE(HASHTABLE)
NAMEREF(again)
NAMEREF(convert)
NULLREF()
NAMEREF(current)
NAMEREF(d_Nr)
NAMEREF(begin)
NAMEREF(fload)
NULLREF()
NAMEREF(strsave)
NAMEREF(open_Merror)
NAMEREF(chdir)
NAMEREF(align)
NAMEREF(space)
NAMEREF(leave)
NULLREF()
NULLREF()
NAMEREF(r_Oo)
NAMEREF(digit)
NAMEREF(_Hrpop_I)
NAMEREF(sload)
NULLREF()
NAMEREF(u_Nr)
NULLREF()
NULLREF()
NAMEREF(abort)
NAMEREF(while)
NAMEREF(cmove)
NAMEREF(search_Mwordlist)
NAMEREF(allot)
NULLREF()
NAMEREF(free_Mline_Mbuffer)
NULLREF()
NULLREF()
NAMEREF(state)
NAMEREF(to_e)
NAMEREF(_C)
NAMEREF(foreign_Z)
NULLREF()
NULLREF()
NAMEREF(_G)
NAMEREF(_H)
NAMEREF(count)
NAMEREF(_J)
NAMEREF(_K)
NAMEREF(until)
NAMEREF(_M)
NAMEREF(_N)
NAMEREF(_O)
NAMEREF(_P)
NAMEREF(_Q)
NAMEREF(_R)
NAMEREF(and)
NAMEREF(_T)
NAMEREF(pad)
NAMEREF(abs)
NULLREF()
NULLREF()
NAMEREF(blk)
NAMEREF(abort_B)
NAMEREF(_a)
NAMEREF(_bresolve)
NAMEREF(_c)
NAMEREF(_dresolve)
NAMEREF(_e)
NAMEREF(bye)
NAMEREF(create_Mfile)
NAMEREF(fm_Omod)
NULLREF()
NAMEREF(_B_B)
NAMEREF(hex)
NAMEREF(variable)
NAMEREF(nip)
NAMEREF(included)
NAMEREF(m_Ommod)
NULLREF()
NULLREF()
NAMEREF(_K_A)
NULLREF()
NULLREF()
NULLREF()
NAMEREF(_N_B)
NAMEREF(um_Omod)
NULLREF()
NAMEREF(sm_Orem)
NULLREF()
NAMEREF(_estack)
NAMEREF(_gchar_i)
NAMEREF(evaluate)
NAMEREF(_K_M)
NAMEREF(_J_O)
NULLREF()
NAMEREF(_g)
NAMEREF(_Hlocal_I)
NAMEREF(_i)
NAMEREF(_T_J)
NAMEREF(_b_C)
NULLREF()
NAMEREF(_C_d)
NULLREF()
NAMEREF(_T_O)
NULLREF()
NULLREF()
NULLREF()
NULLREF()
NULLREF()
NAMEREF(_eerror)
NAMEREF(constant)
NULLREF()
NAMEREF(_P_b)
NAMEREF(_P_c)
NAMEREF(_P_d)
NAMEREF(_Omod)
NAMEREF(get_Mcurrent)
NAMEREF(read_Mline)
NAMEREF(_R_f)
NULLREF()
NAMEREF(create)
NULLREF()
NULLREF()
NULLREF()
NAMEREF(postpone)
NAMEREF(um_Jm)
NAMEREF(_b_d)
NAMEREF(endsel)
NAMEREF(set_Mcurrent)
NULLREF()
NAMEREF(output_Mfile)
NAMEREF(spaces)
NULLREF()
NAMEREF(repeat)
NAMEREF(_Mrot)
NULLREF()
NAMEREF(region)
NULLREF()
NULLREF()
NAMEREF(d_C)
NAMEREF(file_Msize)
NAMEREF(number)
NAMEREF(lshift)
NAMEREF(h_C)
NAMEREF(open_Mpath)
NAMEREF(latest)
NULLREF()
NAMEREF(c_L)
NAMEREF(rshift)
NAMEREF(strcat)
NAMEREF(d_N)
NAMEREF(within)
NAMEREF(R2)
NAMEREF(set_Morder)
NAMEREF(_Cs)
NAMEREF(m_J)
NAMEREF(zeroes)
NAMEREF(_J_Omod)
NAMEREF(hide)
NAMEREF(base)
NAMEREF(definitions)
NAMEREF(unloop)
NAMEREF(char)
NULLREF()
NAMEREF(_Nr)
NAMEREF(_Ns)
NAMEREF(free)
NAMEREF(u_N)
NAMEREF(here)
NULLREF()
NULLREF()
NAMEREF(hold)
NULLREF()
NAMEREF(else)
NULLREF()
NULLREF()
NULLREF()
NULLREF()
NULLREF()
NAMEREF(immediate)
NAMEREF(r_d)
NAMEREF(used)
NAMEREF(_Gsource_Mid)
NAMEREF(u_d)
NAMEREF(u_e)
NAMEREF(drop)
NAMEREF(dump)
NAMEREF(w_f)
NAMEREF(_Znoname)
NAMEREF(roll)
NAMEREF(R3)
NAMEREF(umax)
NAMEREF(get_Mline_Mbuffer)
NULLREF()
NULLREF()
NULLREF()
NAMEREF(true)
NAMEREF(_C_A_Ousr_Olocal_Obin_Oforth)
NAMEREF(locregion)
NAMEREF(open_Minclude)
NAMEREF(open_Mup)
NULLREF()
NAMEREF(_Ostring)
NAMEREF(_dnumber)
NAMEREF(forth_Mwordlist)
NAMEREF(terminate)
NULLREF()
NAMEREF(cell_K)
NULLREF()
NAMEREF(cell_M)
NAMEREF(bl)
NAMEREF(if)
NULLREF()
NULLREF()
NULLREF()
NAMEREF(do)
NAMEREF(dp)
NAMEREF(cr)
NULLREF()
NULLREF()
NAMEREF(_Hforget_I)
NAMEREF(_Rpick)
NAMEREF(_Spick)
NULLREF()
NAMEREF(reset_Mstream)
NAMEREF(interpret)
NAMEREF(_Cvocs)
NAMEREF(_g_G_i)
NULLREF()
NAMEREF(or)
NAMEREF(_Rr_d)
NAMEREF(to)
NAMEREF(_Rr_f)
NAMEREF(_Kloop)
NULLREF()
NAMEREF(_bmark)
NAMEREF(_Lword)
NAMEREF(does_d)
NULLREF()
NULLREF()
NAMEREF(link_d)
NAMEREF(literal)
NAMEREF(_Rover)
NULLREF()
NAMEREF(_Hrstore_I)
NULLREF()
NULLREF()
NAMEREF(execute)
NULLREF()
NULLREF()
NULLREF()
NULLREF()
NAMEREF(write_Mfile)
NAMEREF(recurse)
NULLREF()
NAMEREF(perform)
NULLREF()
NULLREF()
NULLREF()
NULLREF()
ENDTABLE()
/*		C threaded code inner interpreter */

#define TEST(t) ((t)?~0:0)
/*#define TEST(t) ((cell)(-(scell)(t))) this version may be faster */

	va_list ap;
	cell pstack[PSTACKSIZE + UNDERFLOW],
	     rstack[RSTACKSIZE + UNDERFLOW];
	cell *psp = &pstack[PSTACKSIZE],
	     *rsp = &rstack[RSTACKSIZE];
	token *pseudoprogram[2];
	token *w, **ip = pseudoprogram;
	cell rinit, rlimit;		/* inner loop parameters */
	cell *fp;			/* frame pointer for catch/throw */

	va_start(ap, entry);
	switch(entry){
	   case ENTRYINITFORTH:	pseudoprogram[0] = (token *)BODYOF(initforth);
				break;
	   case ENTRYDOFORTH:	pseudoprogram[0] = (token *)BODYOF(doforth);
				break;
	   case ENTRYEVALFORTH:	pseudoprogram[0] = (token *)BODYOF(evalforth);
				break;
	}
	pseudoprogram[1] = (token *)BODYOF(undoforth);
	*rsp = (cell)&pseudoprogram[1];
	{ unsigned int args;
	  for(args = va_arg(ap, unsigned int) ; args; args--)
		*--psp = va_arg(ap, cell);
	}
	va_end(ap);

	D_hashtable.body[1] = (cell)HASHTABLE;	/* C hack, avoids forward ref.*/
#ifdef __GNUC__
	/* if we have GNU C, we can do indirect threaded code using GNU C's
	   goto * operation. */
	w = *ip++;
	dispatch: goto **w; {{
#else
	/* otherwise, we use a slower switch threaded system */
	for(;;){
		w = *ip++;
		dispatch: switch(*w){
#endif
CODE(docolon)
	*--rsp = (cell)ip; ip = (token **)(w+1); next;
ENDCODE()
CODE(return)
	ip = (token **)(*rsp++); next;
ENDCODE()
CODE(dovariable)
	*--psp = (cell)(w+1); next;
ENDCODE()
CODE(doconstant)
	*--psp = (cell)*(w+1); next;
ENDCODE()
CODE(dooffset)
	*psp += (cell)*(w+1); next;
ENDCODE()
CODE(docreate)
	*--rsp = (cell)ip; ip = (token **)*(w+1);
	*--psp = (cell)(w+2); next;
ENDCODE()
CODE(doforeign)
/* limitation: foreign function must have six or fewer arguments */
	cell result;
	switch((cell)*(w+3)){
	   case 0:
		result = ((cell (*)())*(w+2))(); break;
	   case 1:
		result = ((cell (*)())*(w+2))(*psp); break;
	   case 2:
		result = ((cell (*)())*(w+2))(*(psp+1),*psp); break;
	   case 3:
		result = ((cell (*)())*(w+2))(*(psp+2),*(psp+1),*psp); break;
	   case 4:
		result = ((cell (*)())*(w+2))(*(psp+3),
					   *(psp+2),*(psp+1),*psp); break;
	   case 5:
		result = ((cell (*)())*(w+2))(*(psp+4),*(psp+3),
					   *(psp+2),*(psp+1),*psp); break;
	   case 6:
		result = ((cell (*)())*(w+2))(*(psp+5),*(psp+4),*(psp+3),
					   *(psp+2),*(psp+1),*psp); break;
	}
	psp += (cell)*(w+3);		/* discard inputs */
	if(*(w+1)) *--psp = result;	/* if non-void function, retun result */
	next;
ENDCODE()
CODE(_Hliteral_I)
	*--psp = (cell)(*ip++); next;
ENDCODE()
CODE(branch)
	ip = (token **)(*ip); next;
ENDCODE()
CODE(_ebranch)
	ip = *psp++ ? ip+1 : (token **)(*ip); next;
ENDCODE()
CODE(execute)
	w = (token *)(*psp++); goto dispatch;
ENDCODE()
CODE(perform)
	w = *(token **)(*psp++); goto dispatch;
ENDCODE()
CODE(_Hdo_I)
	*--rsp = rlimit; *--rsp = rinit;
	rinit = *psp++; rlimit = *psp++;
	rlimit += MSB; rinit -= rlimit;
	next;
ENDCODE()
CODE(_Hloop_I)
	cell newrinit = rinit + 1;
	if((scell)(~rinit & newrinit) < 0){
		ip++; rinit = *rsp++; rlimit = *rsp++; next;
	} else {
		rinit = newrinit; ip = (token **)(*ip); next;
	}
ENDCODE()
CODE(_H_Kloop_I)
	cell t = *psp++, newrinit = rinit + t;
	if(((scell)(t & rinit & ~newrinit) < 0) ||
	   ((scell)(~t & ~rinit & newrinit) < 0)){
		ip++; rinit = *rsp++; rlimit = *rsp++; next;
	} else {
		rinit = newrinit;
		ip = (token **)(*ip); next;
	}
ENDCODE()
CODE(i)
	*--psp = rinit + rlimit; next;
ENDCODE()
CODE(j)
	*--psp = *rsp + *(rsp+1); next;
ENDCODE()
CODE(_Hleave_I)
	ip = (token **)(*ip);
	rinit = *rsp++; rlimit = *rsp++; next;
ENDCODE()
CODE(unloop)
	rinit = *rsp++; rlimit = *rsp++; next;
ENDCODE()
CODE(undoforth)
	return;
ENDCODE()
CODE(defaultcatcher)
	rsp++;				/* discard saved param. stack pointer */
	ip = (token **)(*rsp++);	/* restore instruction pointer */
	fp = (cell *)(*rsp++);		/* ... and orignal frame pointer */
	*--psp = 0;			/* return zero */
	next;
ENDCODE()
CODE(catch)
	*--rsp = (cell)fp;		/* save old frame pointer */
	*--rsp = (cell)ip;		/* ... instruction pointer */
	ip = (token **)&BOGUS;		/* set default catcher */
	w = (token *)(*psp++);
	*--rsp = (cell)psp;		/* save parameter stack pointer */
	fp = rsp;			/* record sp as frame pointer */
	goto dispatch;
ENDCODE()
CODE(throw)
	cell t = *psp;
	if(t){				/* if non-zero throw */
		rsp = fp;		/* restore original stack depth */
		psp = (cell *)(*rsp++);	/* ... parameter stack too */
		ip = (token **)(*rsp++);/* ... and the instruction pointer */
		fp = (cell *)(*rsp++);	/* ... and original frame pointer */
		*--psp = t;		/* return non-zero throw value */
	}
	next;
ENDCODE()
CODE(_Hrfetch_I)
	*--psp = *(cell *)((unsigned char *)rsp + (cell)(*ip++)); next;
ENDCODE()
CODE(_Hrstore_I)
	*(cell *)((unsigned char *)rsp + (cell)(*ip++)) = *psp++; next;
ENDCODE()
CODE(_Hrpop_I)
	rsp = (cell *)((unsigned char *)rsp + (cell)(*ip++)); next;
ENDCODE()
CODE(_Hinitlocals_I)
	cell t = (cell)(*ip++);
	while(t--) *--rsp = *psp++;
	next;
ENDCODE()
CODE(_A)
	cell t = *psp++; *(cell *)t = *psp++; next;
ENDCODE()
CODE(_Asp)
	psp = (cell *)(*psp); next;
ENDCODE()
CODE(_K)
	cell t = *psp++; *psp += t; next;
ENDCODE()
CODE(_K_A)
	cell t = *psp++; *(cell *)t += *psp++; next;
ENDCODE()
CODE(_M)
	cell t = *psp++; *psp -= t; next;
ENDCODE()
CODE(_M_Q)
	*--psp = (cell)-1; next;
ENDCODE()
CODE(_M_R)
	*--psp = (cell)-2; next;
ENDCODE()
CODE(_M_T)
	*--psp = (cell)-4; next;
ENDCODE()
CODE(_P)
	*--psp = 0; next;
ENDCODE()
CODE(_P_b)
	*psp = TEST((scell)(*psp)<0); next;
ENDCODE()
CODE(_P_c)
	*psp = TEST((scell)(*psp)==0); next;
ENDCODE()
CODE(_Q)
	*--psp = 1; next;
ENDCODE()
CODE(_Q_K)
	(*psp)++; next;
ENDCODE()
CODE(_Q_M)
	(*psp)--; next;
ENDCODE()
CODE(_R)
	*--psp = 2; next;
ENDCODE()
CODE(_R_K)
	*psp += 2; next;
ENDCODE()
CODE(_R_M)
	*psp -= 2; next;
ENDCODE()
CODE(_R_J)
	*psp <<= 1; next;
ENDCODE()
CODE(_R_O)
#ifdef NO_ASR /* use portable version if signed right shifts don't work */
	*psp = (*psp>>1) | (*psp&MSB); next;
#else
	*psp = (cell)((scell)(*psp)>>1); next;
#endif
ENDCODE()
CODE(_Rpick)
	cell t = *(psp+2); *--psp = t; next;
ENDCODE()
CODE(_Spick)
	cell t = *(psp+3); *--psp = t; next;
ENDCODE()
CODE(_T)
	*--psp = 4; next;
ENDCODE()
CODE(_T_K)
	*psp += 4; next;
ENDCODE()
CODE(_T_M)
	*psp -= 4; next;
ENDCODE()
CODE(_T_J)
	*psp <<= 2; next;
ENDCODE()
CODE(_T_O)
#ifdef NO_ASR /* use portable version if signed right shifts don't work */
	*psp = (*psp>>2) | ((*psp&MSB) ? MSB2 : 0); next;
#else
	*psp = (cell)((scell)(*psp)>>2); next;
#endif
ENDCODE()
CODE(_b)
	cell t = *psp++; *psp = TEST((scell)(*psp)<(scell)t); next;
ENDCODE()
CODE(_c)
	cell t = *psp++; *psp = TEST(*psp==t); next;
ENDCODE()
CODE(_d)
	cell t = *psp++; *psp = TEST((scell)(*psp)>(scell)t); next;
ENDCODE()
CODE(_dbody)
	*psp += (cells_in_code_field+1)*sizeof(cell); next;
ENDCODE()
CODE(_dr)
	*--rsp = *psp++; next;
ENDCODE()
CODE(_edup)
	cell t = *psp; if(t) *--psp = t; next;
ENDCODE()
CODE(_f)
	*psp = *(cell *)(*psp); next;
ENDCODE()
CODE(_fsp)
	cell t = (cell)psp; *--psp = t; next;
ENDCODE()
CODE(and)
	cell t = *psp++; *psp &= t; next;
ENDCODE()
CODE(body_d)
	*psp -= (cells_in_code_field+1)*sizeof(cell); next;
ENDCODE()
CODE(char_K)
	*psp += sizeof(char); next;
ENDCODE()
CODE(chars)
	next;
ENDCODE()
CODE(cell)
	*--psp = sizeof(cell); next;
ENDCODE()
CODE(cell_K)
	*psp += sizeof(cell); next;
ENDCODE()
CODE(cell_M)
	*psp -= sizeof(cell); next;
ENDCODE()
CODE(cells)
	*psp <<= 2; next; /* TBD should be log2(sizeof(cell)) */
ENDCODE()
CODE(cell_O)
#ifdef NO_ASR /* use portable version if signed right shifts don't work */
	*psp = (*psp>>2) | ((*psp&MSB) ? MSB2 : 0); next;
#else
	*psp = (cell)((scell)(*psp)>>2); next;
#endif
ENDCODE()
CODE(c_A)
	cell t = *psp++; *(unsigned char *)t = *psp++; next;
ENDCODE()
CODE(c_f)
	*psp = (cell)*(unsigned char *)(*psp); next;
ENDCODE()
CODE(cmove)
	cell len = *psp++;
	unsigned char *dst = (unsigned char *)(*psp++);
	unsigned char *src = (unsigned char *)(*psp++);
	while(len--) *dst++ = *src++;
	next;
ENDCODE()
CODE(cmove_d)
	cell len = *psp++;
	unsigned char *dst = (unsigned char *)(*psp++ + len);
	unsigned char *src = (unsigned char *)(*psp++ + len);
	while(len--) *--dst = *--src;
	next;
ENDCODE()
CODE(move)
	cell len = *psp++;
	unsigned char *dst = (unsigned char *)(*psp++);
	unsigned char *src = (unsigned char *)(*psp++);
	if((dst >= src) && (dst < (src+len))){
		dst +=len; src += len;
		while(len--) *--dst = *--src;
	} else {
		while(len--) *dst++ = *src++;
	}
	next;
ENDCODE()
CODE(codefieldsize)
	*--psp = cells_in_code_field * sizeof(cell);
	next;
ENDCODE()
CODE(d_b)
	scell ms2 = (scell)(*psp++);
	cell  ls2 = *psp++;
	scell ms1 = (scell)(*psp++);
	cell  ls1 = *psp;
	if(ms1==ms2)	*psp = TEST(ls1<ls2);
	else		*psp = TEST(ms1<ms2);
	next;
ENDCODE()
CODE(dnegate)
	cell ms = ~*psp;
	cell ls = ~*(psp+1);
	cell newls = ls + 1;
	*(psp+1) = newls;
	*psp = (scell)(~newls&ls)<0 ? ms+1 : ms;
	next;
ENDCODE()
CODE(d_K)
	cell ms1 = *psp++;
	cell ls1 = *psp++;
	cell ls2 = *(psp+1);
	cell newls = ls1 + ls2;
	*(psp+1) = newls;
	*psp += (scell)(ls1&ls2 | ~newls&(ls1|ls2))<0 ? ms1+1 : ms1;
	next;
ENDCODE()
CODE(d_ds)
	psp++; next;
ENDCODE()
CODE(drop)
	psp++; next;
ENDCODE()
CODE(dup)
	cell t = *psp; *--psp = t; next;
ENDCODE()
CODE(invert)
	*psp = ~*psp; next;
ENDCODE()
CODE(lshift)
	cell t = *psp++; *psp <<= t; next;
ENDCODE()
CODE(negate)
	*psp = (cell)-(scell)(*psp); next;
ENDCODE()
CODE(nip)
	cell t = *psp++; *psp = t; next;
ENDCODE()
CODE(not)
	*psp = ~*psp; next;
ENDCODE()
CODE(or)
	cell t = *psp++; *psp |= t; next;
ENDCODE()
CODE(over)
	cell t = *(psp+1); *--psp = t; next;
ENDCODE()
CODE(r_d)
	*--psp = *rsp++; next;
ENDCODE()
CODE(r_f)
	*--psp = *rsp; next;
ENDCODE()
CODE(rdrop)
	rsp++; next;
ENDCODE()
CODE(rshift)
	cell t = *psp++; *psp >>= t; next;
ENDCODE()
CODE(aligned)
	*psp = (*psp+3) & ~3; next; /* TBD: assumes 32 bits */
ENDCODE()
CODE(rot)
	cell t = *psp; *psp = *(psp+2); *(psp+2) = *(psp+1);
	*(psp+1) = t; next;
ENDCODE()
CODE(rotate)
	cell count = (*psp++) & 0x1f;	/* TBD: assumes 32 bits */
	if(count){
		*psp = (*psp << count) | (*psp >> (32-count));
	}
	next;
ENDCODE()
CODE(sp_P)
	*--psp = (cell)&pstack[PSTACKSIZE]; next;
ENDCODE()
CODE(spreset)
	rsp = &rstack[RSTACKSIZE]; next;
ENDCODE()
CODE(swap)
	cell t = *psp; *psp = *(psp+1); *(psp+1) = t; next;
ENDCODE()
CODE(tuck)
	cell t = *psp; *--psp = t; *(psp+1) = *(psp+2);
	*(psp+2) = t; next;
ENDCODE()
CODE(u_b)
	cell t = *psp++; *psp = TEST(*psp<t); next;
ENDCODE()
CODE(u_d)
	cell t = *psp++; *psp = TEST(*psp>t); next;
ENDCODE()
CODE(um_J)
	cell a = *(psp+1)>>16,	b = *(psp+1)&0xffff;
	cell c = *psp>>16,	d = *psp&0xffff;
	cell ac = a*c, bd = b*d;
	cell x, xlow, xhigh, t;
	x = a*d; xlow = x<<16; xhigh = x>>16;	/* TBD 32 bits */
	t = bd + xlow;
	ac += (scell)(bd&xlow | ~t&(bd|xlow))<0 ? xhigh+1 : xhigh;
	bd = t;
	x = b*c; xlow = x<<16; xhigh = x>>16;	/* TBD 32 bits */
	t = bd + xlow;
	ac += (scell)(bd&xlow | ~t&(bd|xlow))<0 ? xhigh+1 : xhigh;
	bd = t;
	*(psp+1) = bd; *psp = ac;
	next;
ENDCODE()
CODE(um_Omod)
	cell div = *psp++;
	cell ppms = *psp, ppls = *(psp+1);
	cell ppmsnew;
	int i;

	for(i=32; i; i--){
		ppmsnew = ppms<<1; if(ppls & MSB) ppmsnew++;
		ppls <<= 1;
		if(ppms & MSB){
			ppms = ppmsnew;
			ppls++;
			ppms -= div;
		} else if(ppmsnew >= div){
			ppms = ppmsnew;
			ppls++;
			ppms -= div;
		} else {
			ppms = ppmsnew;
		}
	}
	*(psp+1) = ppms; *psp = ppls;
	next;
ENDCODE()
CODE(w_A)
	cell t = *psp++; *(unsigned short *)t = *psp++; next;
ENDCODE()
CODE(w_f)
	*psp = (cell)*(unsigned short *)(*psp); next;
ENDCODE()
CODE(within)
	cell upper = *psp++;
	cell lower = *psp++;
	cell check = *psp;
	*psp = TEST((cell)(check-lower)<(cell)(upper-lower));
	next;
ENDCODE()
CODE(xor)
	cell t = *psp++; *psp ^= t; next;
ENDCODE()
CODE(_R_dr)
	cell t = *psp++; *--rsp = *psp++; *--rsp = t; next;
ENDCODE()
CODE(_Rr_d)
	cell t = *rsp++; *--psp = *rsp++; *--psp = t; next;
ENDCODE()
CODE(_Rr_f)
	cell t = *rsp; *--psp = *(rsp+1); *--psp = t; next;
ENDCODE()
CODE(_Rdrop)
	psp += 2; next;
ENDCODE()
CODE(_Rdup)
	cell t0 = *psp, t1 = *(psp+1); *--psp = t1; *--psp = t0; next;
ENDCODE()
CODE(_Rover)
	cell t0 = *(psp+2), t1 = *(psp+3); *--psp = t1; *--psp = t0; next;
ENDCODE()
CODE(_Rswap)
	cell t0 = *psp, t1 = *(psp+1);
	*psp = *(psp+2); *(psp+1) = *(psp+3);
	*(psp+2) = t0; *(psp+3) = t1; next;
ENDCODE()
CODE(push_Mstream)
	*--rsp = (cell)TIBPTR; *--rsp = IN; *--rsp = NTIB;
	*--rsp = BLK; *--rsp = SFILE;	/* save current state */
	SFILE = *psp++; NTIB = *psp++; TIBPTR = (unsigned char *)*psp++;
	IN = 0; BLK = 0;		/* new non-block stream */
	next;
ENDCODE()
CODE(push_Mblock_Mstream)
	*--rsp = (cell)TIBPTR; *--rsp = IN; *--rsp = NTIB;
	*--rsp = BLK; *--rsp = SFILE;	/* save current state */
	BLK = *psp++; IN = 0;		/* new block stream */
	next;
ENDCODE()
CODE(pop_Mstream)
	SFILE = *rsp++; BLK = *rsp++; NTIB = *rsp++;
	IN = *rsp++; TIBPTR = (unsigned char *)*rsp++; /* restore saved state */
	next;
ENDCODE()
CODE(_Hfind_I)
	unsigned char *tstring = (unsigned char *)*(psp+3);
	cell length = *(psp+2);
	header *head = (header *)*(psp+1);
	short wid = (short)*psp;
	cell dlength = length>5 ? 5 : length;	/* TBD: define 5 */
	cell i;
	goto test;
nexthead:
	if((length != (head->name[0]&~IMMMASK)) ||
	   (wid != head->wid)) goto cont;
	for(i=0; i<dlength; i++){
		if(tstring[i] != head->name[i+1]) goto cont;
	}
	/* match */
	psp++;
	*(psp+2) = (cell)(head+1);		/* adjacent code field */
	*(psp+1) = (cell)(head->name[0]&IMMMASK) ? 1 : (cell)-1;
	*psp = ~0;
	next;
cont:	head = (header *)(head->link);
test:	if(head) goto nexthead;
	/* failure */
	*psp=0;
	next;
ENDCODE()
#define WHILENOT(delim,buffer,buflength,offset) \
	while((offset<buflength) && \
	      (buffer[offset++] != delim))
#define WHILENOTWHITE(buffer,buflength,offset) \
	while((offset<buflength) && \
	      (buffer[offset++] > ' '))
#define SKIP(delim,buffer,buflength,offset) \
	while((offset<buflength) && \
	      (buffer[offset] == delim)) \
		offset++
#define SKIPWHITE(buffer,buflength,offset) \
	while((offset<buflength) && \
	      (buffer[offset] <= ' ')) \
		offset++
CODE(_kparse)
	cell buflength = *psp++;
	unsigned char *buffer = (unsigned char *)(*psp);
	unsigned char delim = (unsigned char)*(psp+1);
	cell parsedlength = 0;
	*(psp+1) = (cell)(&buffer[IN]);	/* return address of parsed word */
	if(delim == ' '){
		WHILENOTWHITE(buffer,buflength,IN) parsedlength++;
	} else {
		WHILENOT(delim,buffer,buflength,IN) parsedlength++;
	}
	*psp = parsedlength;		/* return length of parsed word */
	next;
ENDCODE()
CODE(_kparse_Mword)
	cell buflength = *psp++;
	unsigned char *buffer = (unsigned char *)(*psp);
	unsigned char delim = (unsigned char)*(psp+1);
	cell parsedlength = 0;
	if(delim == ' '){
		SKIPWHITE(buffer,buflength,IN);
		*(psp+1) = (cell)(&buffer[IN]);	/* return address of word */
		WHILENOTWHITE(buffer,buflength,IN) parsedlength++;
	} else {
		SKIP(delim,buffer,buflength,IN);
		*(psp+1) = (cell)(&buffer[IN]);	/* return address of word */
		WHILENOT(delim,buffer,buflength,IN) parsedlength++;
	}
	*psp = parsedlength;		/* return length of parsed word */
	next;
ENDCODE()
CODE(_kword)
	cell buflength = *psp++;
	unsigned char *buffer = (unsigned char *)(*psp++);
	unsigned char delim = (unsigned char)(*psp);
	cell parsedlength = 0;
	unsigned char *src, *dst;
	if(delim == ' '){
		SKIPWHITE(buffer,buflength,IN);
		src = &buffer[IN];
		WHILENOTWHITE(buffer,buflength,IN) parsedlength++;
	} else {
		SKIP(delim,buffer,buflength,IN);
		src = &buffer[IN];
		WHILENOT(delim,buffer,buflength,IN) parsedlength++;
	}
	*psp = (cell)(dst = *CURREGION);/* return string at HERE */
	*dst++ = (unsigned char)parsedlength;
	while(parsedlength--) *dst++ = *src++;
	*dst = ' ';			/* blank at end for NUMBER */
	next;
ENDCODE()
CODE(_Ostring)
	cell t = *psp++; *(psp+1) += t; *psp -= t; next;
ENDCODE()
CODE(split)
	unsigned char *buffer = (unsigned char *)*(psp+2);
	cell buflength = *(psp+1);
	unsigned char delim = (unsigned char)*psp;
	cell offset = 0, parsedlength = 0;
	if(delim == ' '){
		WHILENOTWHITE(buffer,buflength,offset) parsedlength++;
	} else {
		WHILENOT(delim,buffer,buflength,offset) parsedlength++;
	}
	*(psp+2) = (cell)&buffer[offset];
	*(psp+1) = buflength-offset;
	*psp = (cell)buffer;
	*--psp = parsedlength;
	next;
ENDCODE()
CODE(fkey)
	*psp = fkey((FILE *)(*psp)); next;
ENDCODE()
CODE(bin)
	char *mode = (char *)(*psp);
	if(mode == romode)	*psp = (cell)robmode;
	else if(mode == rwmode)	*psp = (cell)rwbmode;
	else if(mode == womode)	*psp = (cell)wobmode;
	next;
ENDCODE()
CODE(close_Mfile)
	errno = 0;
	(void)fclose((FILE *)(*psp));
	*psp = errno; next;
ENDCODE()
CODE(create_Mfile)
	cell w1 = *psp++;
	errno = 0;
	/* wrapper for creat(2) and fopen(3S) */
	*(psp+1) = (cell)create_file((char *)(*(psp+1)),
					(int)(*psp), (char *)w1);
	*psp = errno; next;
ENDCODE()
CODE(delete_Mfile)
	cell u = *psp++;
	errno = 0;
	delete_file((char *)(*psp), (int)u); /* wrapper for unlink(2) */
	*psp = errno ; next;
ENDCODE()
CODE(file_Mposition)
	errno = 0;
	*psp = (cell)ftell((FILE *)(*psp)); /* use ftell(3S) */
	*--psp = 0;			/* extend to double unsigned number */
	*--psp = errno; next;
ENDCODE()
CODE(file_Msize)
	errno = 0;
	*psp = (unsigned int)file_size((FILE *)(*psp));
					/* use wrapper for fstat(2) */
	*--psp = 0;			/* extend to double unsigned number */
	*--psp = errno; next;
ENDCODE()
CODE(file_Mstatus)
	errno = 0;
	*(psp+1) = (cell)file_status((char *)(*(psp+1)), (int)(*psp));
					/* use wrapper for stat(2) */
	*psp = errno; next;
ENDCODE()
CODE(open_Mfile)
	cell w1 = *psp++;
	errno = 0;
	*(psp+1) = (cell)open_file((char *)(*(psp+1)), (int)(*psp), (char *)w1);
					/* use wrapper for fopen(3S) */
	*psp = errno; next;
ENDCODE()
CODE(r_Oo)
	*--psp = (cell)romode; next;
ENDCODE()
CODE(r_Ow)
	*--psp = (cell)rwmode; next;
ENDCODE()
CODE(read_Mfile)
	cell fileid = *psp++;
	errno = 0;
	*(psp+1) = fread((char *)(*(psp+1)), (int)1,
			 (int)(*psp), (FILE *)fileid);
	*psp = errno; next;
ENDCODE()
CODE(read_Mline)
	cell t;
	errno = 0;
	t = read_line((char *)(*(psp+2)), (int)(*(psp+1)), (FILE *)(*psp));
					/* use custom line routine */
					/* zero indicates end of file */
	*(psp+1) = t==0 ? 0 : (cell)-1;
	*(psp+2) = t-1;			/* return length less EOL char */
	*psp = errno; next;
ENDCODE()
CODE(reposition_Mfile)
	cell fileid = *psp++;
	errno = 0;
	psp++;				/* discard ms part of offset */
	fseek((FILE *)fileid, (long)(*psp), (int)0);
					/* use fseek(3S) (from start of file */
	*psp = errno; next;
ENDCODE()
CODE(resize_Mfile)
	cell fileid = *psp++;
	errno = 0;
	psp++;				/* discard ms part of offset */
	resize_file((off_t)(*psp), (FILE *)fileid);
					/* use wrapper for ftruncate(2) */
	*psp = errno; next;
ENDCODE()
CODE(w_Oo)
	*--psp = (cell)womode; next;
ENDCODE()
CODE(write_Mfile)
	cell fileid = *psp++;
	cell u = *psp++;
	errno = 0;
	fwrite((char *)(*psp), (int)1, (int)u, (FILE *)fileid);
					/* use fwrite(3S) */
	*psp = errno; next;
ENDCODE()
CODE(write_Mline)
	cell fileid = *psp++;
	cell u = *psp++;
	errno = 0;
	write_line((char *)(*psp), (int)u, (FILE *)fileid);
					/* use custom line routine */
	*psp = errno; next;
ENDCODE()
CODE(perror)
	perror(forthmsg); next;
ENDCODE()
CODE(R0)
	*--psp = (cell)stdin; next;
ENDCODE()
CODE(R1)
	*--psp = (cell)stdout; next;
ENDCODE()
CODE(R2)
	*--psp = (cell)stderr; next;
ENDCODE()
CODE(terminate)
	exit((int)(*psp));
/* not reached */
ENDCODE()
CODE(chdir)
	cell u = *psp++, addr = *psp++;
	change_dir((char *)addr, (int)u);
					/* wrapper for chdir(2) */
	next;
ENDCODE()
CODE(get_Menv)
	*(psp+1) = (cell)get_env((char *)(*(psp+1)), (int)(*psp));
					/* use wrapper for getenv(3) */
	*psp = result2;			/* return length */
	next;
ENDCODE()
CODE(allocate)
	errno = 0;
	*psp = (cell)malloc(*psp);
	*--psp = errno; next;
ENDCODE()
CODE(free)
	errno = 0;
	free((char *)(*psp));
	*psp = errno; next;
ENDCODE()
CODE(resize)
	errno = 0;
	*(psp+1) = (cell)realloc((char *)(*(psp+1)), (unsigned)(*psp));
	*psp = errno; next;
ENDCODE()
CODE(key)
	*--psp = cmd_getc(); next;
ENDCODE()
CODE(accept)
	cell t;
	errno = 0;
	t = cmd_getline((char *)(*(psp+1)), (int)(*psp));
					/* use custom line routine */
					/* zero indicates end of file */
	if(errno) {			/* if error, report and exit */
		perror(forthmsg); exit(1);
	}
	*++psp = t-1; next;		/* return length less EOL char */
ENDCODE()
CODE(emit)
	cmd_putc((unsigned char)(*psp++)); next;
ENDCODE()
CODE(type)
	cell u = *psp++;
	errno = 0;
	cmd_putline((char *)(*psp), (int)u); /* use custom line routine */
	if(errno) {			/* if error, report and exit */
		perror(forthmsg); exit(1);
	}
	psp++; next;
ENDCODE()
CODE(ioinit)
	cmd_ioinit(); next;
ENDCODE()
/* TBD: this ends interp() */
		}
	}
}

void
init_forth(void)
{
	interp(ENTRYINITFORTH, 0);
}

void
do_forth(int argc, char *argv[])
{
	interp(ENTRYDOFORTH, 2, argc, argv);
}

void
eval_forth(char *s)
{
	interp(ENTRYEVALFORTH, 1, s);
}

